
Snake_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a9c  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f08  08007f08  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f10  08007f10  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08007f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000220  08008138  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08008138  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101d3  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ae  00000000  00000000  00030423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00033740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171aa  00000000  00000000  000346a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ba9  00000000  00000000  0004b84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090aca  00000000  00000000  0005e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeebd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  000eef10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f42b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  000f42dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005454 	.word	0x08005454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08005454 	.word	0x08005454

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af02      	add	r7, sp, #8
 800059a:	4604      	mov	r4, r0
 800059c:	4608      	mov	r0, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	4623      	mov	r3, r4
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	4603      	mov	r3, r0
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]
 80005ae:	4613      	mov	r3, r2
 80005b0:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005b2:	88f8      	ldrh	r0, [r7, #6]
 80005b4:	88b9      	ldrh	r1, [r7, #4]
 80005b6:	887a      	ldrh	r2, [r7, #2]
 80005b8:	883c      	ldrh	r4, [r7, #0]
 80005ba:	8b3b      	ldrh	r3, [r7, #24]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	f000 faca 	bl	8000b58 <ST7735_FillRectangle>
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <fillScreen+0x2c>)
 80005d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <fillScreen+0x30>)
 80005de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	460b      	mov	r3, r1
 80005e8:	2100      	movs	r1, #0
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffd2 	bl	8000594 <fillRect>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000023c 	.word	0x2000023c
 80005fc:	2000023e 	.word	0x2000023e

08000600 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <ST7735_Select+0x14>)
 800060a:	f001 fe8f 	bl	800232c <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020400 	.word	0x40020400

08000618 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <ST7735_Unselect+0x14>)
 8000622:	f001 fe83 	bl	800232c <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400

08000630 <ST7735_Reset>:

void ST7735_Reset()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <ST7735_Reset+0x28>)
 800063c:	f001 fe76 	bl	800232c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f001 fba1 	bl	8001d88 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <ST7735_Reset+0x28>)
 800064e:	f001 fe6d 	bl	800232c <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000

0800065c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <ST7735_WriteCommand+0x2c>)
 800066e:	f001 fe5d 	bl	800232c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2201      	movs	r2, #1
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <ST7735_WriteCommand+0x30>)
 800067c:	f002 fc81 	bl	8002f82 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020000 	.word	0x40020000
 800068c:	200002f0 	.word	0x200002f0

08000690 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <ST7735_WriteData+0x30>)
 80006a2:	f001 fe43 	bl	800232c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <ST7735_WriteData+0x34>)
 80006b2:	f002 fc66 	bl	8002f82 <HAL_SPI_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40020000 	.word	0x40020000
 80006c4:	200002f0 	.word	0x200002f0

080006c8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80006da:	e034      	b.n	8000746 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffb7 	bl	800065c <ST7735_WriteCommand>

        numArgs = *addr++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80006f8:	7abb      	ldrb	r3, [r7, #10]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000702:	7abb      	ldrb	r3, [r7, #10]
 8000704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000708:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800070a:	7abb      	ldrb	r3, [r7, #10]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000710:	7abb      	ldrb	r3, [r7, #10]
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ffbb 	bl	8000690 <ST7735_WriteData>
            addr += numArgs;
 800071a:	7abb      	ldrb	r3, [r7, #10]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00e      	beq.n	8000746 <DisplayInit+0x7e>
            ms = *addr++;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	2bff      	cmp	r3, #255	; 0xff
 8000736:	d102      	bne.n	800073e <DisplayInit+0x76>
 8000738:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800073c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fb21 	bl	8001d88 <HAL_Delay>
    while(numCommands--) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	73fa      	strb	r2, [r7, #15]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1c5      	bne.n	80006dc <DisplayInit+0x14>
        }
    }
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4604      	mov	r4, r0
 8000764:	4608      	mov	r0, r1
 8000766:	4611      	mov	r1, r2
 8000768:	461a      	mov	r2, r3
 800076a:	4623      	mov	r3, r4
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	4603      	mov	r3, r0
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	460b      	mov	r3, r1
 8000774:	717b      	strb	r3, [r7, #5]
 8000776:	4613      	mov	r3, r2
 8000778:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff ff6e 	bl	800065c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000780:	2300      	movs	r3, #0
 8000782:	733b      	strb	r3, [r7, #12]
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <ST7735_SetAddressWindow+0x88>)
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	737b      	strb	r3, [r7, #13]
 8000790:	2300      	movs	r3, #0
 8000792:	73bb      	strb	r3, [r7, #14]
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <ST7735_SetAddressWindow+0x88>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	797b      	ldrb	r3, [r7, #5]
 800079a:	4413      	add	r3, r2
 800079c:	b2db      	uxtb	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2104      	movs	r1, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff72 	bl	8000690 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80007ac:	202b      	movs	r0, #43	; 0x2b
 80007ae:	f7ff ff55 	bl	800065c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <ST7735_SetAddressWindow+0x8c>)
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <ST7735_SetAddressWindow+0x8c>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	793b      	ldrb	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2104      	movs	r1, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80007d6:	202c      	movs	r0, #44	; 0x2c
 80007d8:	f7ff ff40 	bl	800065c <ST7735_WriteCommand>
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	20000243 	.word	0x20000243
 80007e8:	20000244 	.word	0x20000244

080007ec <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80007f6:	f7ff ff03 	bl	8000600 <ST7735_Select>
    ST7735_Reset();
 80007fa:	f7ff ff19 	bl	8000630 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <ST7735_Init+0x44>)
 8000800:	f7ff ff62 	bl	80006c8 <DisplayInit>
    DisplayInit(init_cmds2);
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <ST7735_Init+0x48>)
 8000806:	f7ff ff5f 	bl	80006c8 <DisplayInit>
    DisplayInit(init_cmds3);
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <ST7735_Init+0x4c>)
 800080c:	f7ff ff5c 	bl	80006c8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <ST7735_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <ST7735_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f810 	bl	8000844 <ST7735_SetRotation>
    ST7735_Unselect();
 8000824:	f7ff fef8 	bl	8000618 <ST7735_Unselect>

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	080054e0 	.word	0x080054e0
 8000834:	08005518 	.word	0x08005518
 8000838:	08005528 	.word	0x08005528
 800083c:	20000241 	.word	0x20000241
 8000840:	20000242 	.word	0x20000242

08000844 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <ST7735_SetRotation+0xe4>)
 800085c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <ST7735_SetRotation+0xe4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d84e      	bhi.n	8000904 <ST7735_SetRotation+0xc0>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <ST7735_SetRotation+0x28>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	0800087d 	.word	0x0800087d
 8000870:	0800089f 	.word	0x0800089f
 8000874:	080008c1 	.word	0x080008c1
 8000878:	080008e3 	.word	0x080008e3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800087c:	23c0      	movs	r3, #192	; 0xc0
 800087e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <ST7735_SetRotation+0xe8>)
 8000882:	22a0      	movs	r2, #160	; 0xa0
 8000884:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <ST7735_SetRotation+0xec>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <ST7735_SetRotation+0xf0>)
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <ST7735_SetRotation+0xf4>)
 8000892:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <ST7735_SetRotation+0xf8>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <ST7735_SetRotation+0xfc>)
 800089a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800089c:	e032      	b.n	8000904 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <ST7735_SetRotation+0xec>)
 80008a4:	22a0      	movs	r2, #160	; 0xa0
 80008a6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <ST7735_SetRotation+0xe8>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <ST7735_SetRotation+0xf0>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <ST7735_SetRotation+0xfc>)
 80008b4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <ST7735_SetRotation+0xf8>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <ST7735_SetRotation+0xf4>)
 80008bc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008be:	e021      	b.n	8000904 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <ST7735_SetRotation+0xe8>)
 80008c6:	22a0      	movs	r2, #160	; 0xa0
 80008c8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <ST7735_SetRotation+0xec>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <ST7735_SetRotation+0xf0>)
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <ST7735_SetRotation+0xf4>)
 80008d6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <ST7735_SetRotation+0xf8>)
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <ST7735_SetRotation+0xfc>)
 80008de:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008e0:	e010      	b.n	8000904 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008e2:	2360      	movs	r3, #96	; 0x60
 80008e4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <ST7735_SetRotation+0xec>)
 80008e8:	22a0      	movs	r2, #160	; 0xa0
 80008ea:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <ST7735_SetRotation+0xe8>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <ST7735_SetRotation+0xf0>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <ST7735_SetRotation+0xfc>)
 80008f8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <ST7735_SetRotation+0xf8>)
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <ST7735_SetRotation+0xf4>)
 8000900:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000902:	bf00      	nop
  }
  ST7735_Select();
 8000904:	f7ff fe7c 	bl	8000600 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f7ff fea7 	bl	800065c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800090e:	f107 030f 	add.w	r3, r7, #15
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff febb 	bl	8000690 <ST7735_WriteData>
  ST7735_Unselect();
 800091a:	f7ff fe7d 	bl	8000618 <ST7735_Unselect>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000240 	.word	0x20000240
 800092c:	2000023e 	.word	0x2000023e
 8000930:	2000023c 	.word	0x2000023c
 8000934:	20000241 	.word	0x20000241
 8000938:	20000243 	.word	0x20000243
 800093c:	20000242 	.word	0x20000242
 8000940:	20000244 	.word	0x20000244

08000944 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	80bb      	strh	r3, [r7, #4]
 8000952:	4613      	mov	r3, r2
 8000954:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <ST7735_DrawPixel+0x74>)
 800095a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800095e:	4293      	cmp	r3, r2
 8000960:	da26      	bge.n	80009b0 <ST7735_DrawPixel+0x6c>
 8000962:	88bb      	ldrh	r3, [r7, #4]
 8000964:	4a15      	ldr	r2, [pc, #84]	; (80009bc <ST7735_DrawPixel+0x78>)
 8000966:	f9b2 2000 	ldrsh.w	r2, [r2]
 800096a:	4293      	cmp	r3, r2
 800096c:	da20      	bge.n	80009b0 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800096e:	f7ff fe47 	bl	8000600 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	b2d8      	uxtb	r0, r3
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	b2d9      	uxtb	r1, r3
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	b2da      	uxtb	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3301      	adds	r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f7ff fee7 	bl	800075c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	b29b      	uxth	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	733b      	strb	r3, [r7, #12]
 8000998:	887b      	ldrh	r3, [r7, #2]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe73 	bl	8000690 <ST7735_WriteData>

    ST7735_Unselect();
 80009aa:	f7ff fe35 	bl	8000618 <ST7735_Unselect>
 80009ae:	e000      	b.n	80009b2 <ST7735_DrawPixel+0x6e>
        return;
 80009b0:	bf00      	nop
}
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000023c 	.word	0x2000023c
 80009bc:	2000023e 	.word	0x2000023e

080009c0 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009c0:	b082      	sub	sp, #8
 80009c2:	b590      	push	{r4, r7, lr}
 80009c4:	b089      	sub	sp, #36	; 0x24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2d8      	uxtb	r0, r3
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009e6:	4413      	add	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2dc      	uxtb	r4, r3
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009f6:	4413      	add	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4622      	mov	r2, r4
 8000a00:	f7ff feac 	bl	800075c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	e043      	b.n	8000a92 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	3b20      	subs	r3, #32
 8000a10:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	e029      	b.n	8000a80 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00e      	beq.n	8000a5a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	743b      	strb	r3, [r7, #16]
 8000a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2102      	movs	r1, #2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe1c 	bl	8000690 <ST7735_WriteData>
 8000a58:	e00f      	b.n	8000a7a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
 8000a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2102      	movs	r1, #2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe0b 	bl	8000690 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a84:	461a      	mov	r2, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d3cf      	bcc.n	8000a2c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a96:	461a      	mov	r2, r3
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d3b5      	bcc.n	8000a0a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3724      	adds	r7, #36	; 0x24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aaa:	b002      	add	sp, #8
 8000aac:	4770      	bx	lr
	...

08000ab0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af04      	add	r7, sp, #16
 8000ab8:	603a      	str	r2, [r7, #0]
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	4603      	mov	r3, r0
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ac4:	f7ff fd9c 	bl	8000600 <ST7735_Select>

    while(*str) {
 8000ac8:	e033      	b.n	8000b32 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	7d3a      	ldrb	r2, [r7, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <ST7735_WriteString+0xa0>)
 8000ad2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	db16      	blt.n	8000b08 <ST7735_WriteString+0x58>
            x = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000ade:	7d7b      	ldrb	r3, [r7, #21]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	7d7a      	ldrb	r2, [r7, #21]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <ST7735_WriteString+0xa4>)
 8000af0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000af4:	4293      	cmp	r3, r2
 8000af6:	da21      	bge.n	8000b3c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d103      	bne.n	8000b08 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	603b      	str	r3, [r7, #0]
                continue;
 8000b06:	e014      	b.n	8000b32 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	88b9      	ldrh	r1, [r7, #4]
 8000b0e:	88f8      	ldrh	r0, [r7, #6]
 8000b10:	8c3b      	ldrh	r3, [r7, #32]
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	8bbb      	ldrh	r3, [r7, #28]
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f7ff ff4f 	bl	80009c0 <ST7735_WriteChar>
        x += font.width;
 8000b22:	7d3b      	ldrb	r3, [r7, #20]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4413      	add	r3, r2
 8000b2a:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1c7      	bne.n	8000aca <ST7735_WriteString+0x1a>
 8000b3a:	e000      	b.n	8000b3e <ST7735_WriteString+0x8e>
                break;
 8000b3c:	bf00      	nop
    }

    ST7735_Unselect();
 8000b3e:	f7ff fd6b 	bl	8000618 <ST7735_Unselect>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b4c:	b002      	add	sp, #8
 8000b4e:	4770      	bx	lr
 8000b50:	2000023c 	.word	0x2000023c
 8000b54:	2000023e 	.word	0x2000023e

08000b58 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4a38      	ldr	r2, [pc, #224]	; (8000c5c <ST7735_FillRectangle+0x104>)
 8000b7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	da67      	bge.n	8000c52 <ST7735_FillRectangle+0xfa>
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <ST7735_FillRectangle+0x108>)
 8000b86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	da61      	bge.n	8000c52 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <ST7735_FillRectangle+0x104>)
 8000b96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	dd06      	ble.n	8000bac <ST7735_FillRectangle+0x54>
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <ST7735_FillRectangle+0x104>)
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000bac:	88ba      	ldrh	r2, [r7, #4]
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <ST7735_FillRectangle+0x108>)
 8000bb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	dd06      	ble.n	8000bca <ST7735_FillRectangle+0x72>
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <ST7735_FillRectangle+0x108>)
 8000bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000bca:	f7ff fd19 	bl	8000600 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	b2d9      	uxtb	r1, r3
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b2dc      	uxtb	r4, r3
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	f7ff fdb0 	bl	800075c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bfc:	8c3b      	ldrh	r3, [r7, #32]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	733b      	strb	r3, [r7, #12]
 8000c06:	8c3b      	ldrh	r3, [r7, #32]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <ST7735_FillRectangle+0x10c>)
 8000c14:	f001 fb8a 	bl	800232c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c18:	883b      	ldrh	r3, [r7, #0]
 8000c1a:	80bb      	strh	r3, [r7, #4]
 8000c1c:	e013      	b.n	8000c46 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	80fb      	strh	r3, [r7, #6]
 8000c22:	e00a      	b.n	8000c3a <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c24:	f107 010c 	add.w	r1, r7, #12
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <ST7735_FillRectangle+0x110>)
 8000c30:	f002 f9a7 	bl	8002f82 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f1      	bne.n	8000c24 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e8      	bne.n	8000c1e <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000c4c:	f7ff fce4 	bl	8000618 <ST7735_Unselect>
 8000c50:	e000      	b.n	8000c54 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000c52:	bf00      	nop
}
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000023c 	.word	0x2000023c
 8000c60:	2000023e 	.word	0x2000023e
 8000c64:	40020000 	.word	0x40020000
 8000c68:	200002f0 	.word	0x200002f0

08000c6c <drawApple>:
void ST7735_InvertColors(bool invert) {
    ST7735_Select();
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    ST7735_Unselect();
}
void drawApple(uint16_t x, uint16_t y){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i< 11; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e05e      	b.n	8000d40 <drawApple+0xd4>
		for(int k = 0; k< 11; k++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	e055      	b.n	8000d34 <drawApple+0xc8>
			if(appleArray[i][k]==1){
 8000c88:	4931      	ldr	r1, [pc, #196]	; (8000d50 <drawApple+0xe4>)
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10f      	bne.n	8000cc0 <drawApple+0x54>
				ST7735_DrawPixel(x+k,y+i,RED);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f7ff fe43 	bl	8000944 <ST7735_DrawPixel>
 8000cbe:	e036      	b.n	8000d2e <drawApple+0xc2>
			}
			else if(appleArray[i][k]==0){
 8000cc0:	4923      	ldr	r1, [pc, #140]	; (8000d50 <drawApple+0xe4>)
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	4413      	add	r3, r2
 8000cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10f      	bne.n	8000cf8 <drawApple+0x8c>
				ST7735_DrawPixel(x+k,y+i,GREEN);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4413      	add	r3, r2
 8000ce0:	b298      	uxth	r0, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fe27 	bl	8000944 <ST7735_DrawPixel>
 8000cf6:	e01a      	b.n	8000d2e <drawApple+0xc2>
			}
			else if (appleArray[i][k]==2){
 8000cf8:	4915      	ldr	r1, [pc, #84]	; (8000d50 <drawApple+0xe4>)
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	4413      	add	r3, r2
 8000d08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d10e      	bne.n	8000d2e <drawApple+0xc2>
				ST7735_DrawPixel(x+k,y+i,WHITE);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4413      	add	r3, r2
 8000d18:	b298      	uxth	r0, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff fe0b 	bl	8000944 <ST7735_DrawPixel>
		for(int k = 0; k< 11; k++){
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	dda6      	ble.n	8000c88 <drawApple+0x1c>
	for(int i = 0; i< 11; i++){
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	dd9d      	ble.n	8000c82 <drawApple+0x16>
			}
		}
	}
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000

08000d54 <decodeButtons>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool dbFlag = 0;
int decodeButtons(int destinationFlag){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	int destination = destinationFlag;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
	if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==1 && (dbFlag == 0) && destination != 0){
 8000d60:	2101      	movs	r1, #1
 8000d62:	483f      	ldr	r0, [pc, #252]	; (8000e60 <decodeButtons+0x10c>)
 8000d64:	f001 faca 	bl	80022fc <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d116      	bne.n	8000d9c <decodeButtons+0x48>
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <decodeButtons+0x110>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00f      	beq.n	8000d9c <decodeButtons+0x48>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00c      	beq.n	8000d9c <decodeButtons+0x48>
		destination = 3;
 8000d82:	2303      	movs	r3, #3
 8000d84:	60fb      	str	r3, [r7, #12]
		printf("DBUTTON UP \n");
 8000d86:	4838      	ldr	r0, [pc, #224]	; (8000e68 <decodeButtons+0x114>)
 8000d88:	f003 fc64 	bl	8004654 <puts>
		dbFlag = 1;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <decodeButtons+0x110>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000d92:	2064      	movs	r0, #100	; 0x64
 8000d94:	f000 fff8 	bl	8001d88 <HAL_Delay>
		return destination;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	e05d      	b.n	8000e58 <decodeButtons+0x104>
	}
	else if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin)==1 && (dbFlag == 0) && destination != 3){
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4830      	ldr	r0, [pc, #192]	; (8000e60 <decodeButtons+0x10c>)
 8000da0:	f001 faac 	bl	80022fc <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d116      	bne.n	8000dd8 <decodeButtons+0x84>
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <decodeButtons+0x110>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	f083 0301 	eor.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00f      	beq.n	8000dd8 <decodeButtons+0x84>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d00c      	beq.n	8000dd8 <decodeButtons+0x84>
			destination = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
			printf("DBUTTON DOWN \n");
 8000dc2:	482a      	ldr	r0, [pc, #168]	; (8000e6c <decodeButtons+0x118>)
 8000dc4:	f003 fc46 	bl	8004654 <puts>
			dbFlag = 1;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <decodeButtons+0x110>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000dce:	2064      	movs	r0, #100	; 0x64
 8000dd0:	f000 ffda 	bl	8001d88 <HAL_Delay>
			return destination;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	e03f      	b.n	8000e58 <decodeButtons+0x104>
		}
	else if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==1 && (dbFlag == 0)&& destination != 1){
 8000dd8:	2104      	movs	r1, #4
 8000dda:	4821      	ldr	r0, [pc, #132]	; (8000e60 <decodeButtons+0x10c>)
 8000ddc:	f001 fa8e 	bl	80022fc <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d116      	bne.n	8000e14 <decodeButtons+0xc0>
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <decodeButtons+0x110>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00f      	beq.n	8000e14 <decodeButtons+0xc0>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00c      	beq.n	8000e14 <decodeButtons+0xc0>
			destination = 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
			printf("DBUTTON LEFT \n");
 8000dfe:	481c      	ldr	r0, [pc, #112]	; (8000e70 <decodeButtons+0x11c>)
 8000e00:	f003 fc28 	bl	8004654 <puts>
			dbFlag = 1;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <decodeButtons+0x110>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000e0a:	2064      	movs	r0, #100	; 0x64
 8000e0c:	f000 ffbc 	bl	8001d88 <HAL_Delay>
			return destination;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	e021      	b.n	8000e58 <decodeButtons+0x104>
		}
	else if(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin)==1 && (dbFlag == 0) && destination != 2){
 8000e14:	2108      	movs	r1, #8
 8000e16:	4812      	ldr	r0, [pc, #72]	; (8000e60 <decodeButtons+0x10c>)
 8000e18:	f001 fa70 	bl	80022fc <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d116      	bne.n	8000e50 <decodeButtons+0xfc>
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <decodeButtons+0x110>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f083 0301 	eor.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00f      	beq.n	8000e50 <decodeButtons+0xfc>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d00c      	beq.n	8000e50 <decodeButtons+0xfc>
			destination = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
			printf("DBUTTON RIGHT \n");
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <decodeButtons+0x120>)
 8000e3c:	f003 fc0a 	bl	8004654 <puts>
			dbFlag = 1;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <decodeButtons+0x110>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f000 ff9e 	bl	8001d88 <HAL_Delay>
			return destination;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	e003      	b.n	8000e58 <decodeButtons+0x104>
		}
	else
	{
		dbFlag = 0;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <decodeButtons+0x110>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	}

		return destination;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40020000 	.word	0x40020000
 8000e64:	20000430 	.word	0x20000430
 8000e68:	0800546c 	.word	0x0800546c
 8000e6c:	08005478 	.word	0x08005478
 8000e70:	08005488 	.word	0x08005488
 8000e74:	08005498 	.word	0x08005498

08000e78 <snakeInitialization>:
void snakeInitialization(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8
	ST7735_Init(0);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fcb4 	bl	80007ec <ST7735_Init>
	fillScreen(BLACK);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fba1 	bl	80005cc <fillScreen>
	fillRect(4, 0, 120, 160, GREEN);
 8000e8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	2278      	movs	r2, #120	; 0x78
 8000e94:	2100      	movs	r1, #0
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fb7c 	bl	8000594 <fillRect>
	ST7735_SetRotation(2);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fcd1 	bl	8000844 <ST7735_SetRotation>
	snakeInit();
 8000ea2:	f000 fb2f 	bl	8001504 <snakeInit>
	initApple();
 8000ea6:	f000 fc75 	bl	8001794 <initApple>
	destinationFlag = 1;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <snakeInitialization+0x48>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
	initialise_monitor_handles();
 8000eb0:	f003 f90c 	bl	80040cc <initialise_monitor_handles>
	HAL_TIM_Base_Start_IT(&htim2);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <snakeInitialization+0x4c>)
 8000eb6:	f002 fae1 	bl	800347c <HAL_TIM_Base_Start_IT>

}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000420 	.word	0x20000420
 8000ec4:	20000348 	.word	0x20000348

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fee9 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8c5 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fa75 	bl	80013c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eda:	f000 f97b 	bl	80011d4 <MX_SPI1_Init>
  MX_TIM11_Init();
 8000ede:	f000 fa4d 	bl	800137c <MX_TIM11_Init>
  MX_I2C1_Init();
 8000ee2:	f000 f91b 	bl	800111c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ee6:	f000 f9ad 	bl	8001244 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000eea:	f000 f945 	bl	8001178 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000eee:	f000 f9f7 	bl	80012e0 <MX_TIM5_Init>
//	destinationFlag = 1;
//	initialise_monitor_handles();
//	HAL_TIM_Base_Start_IT(&htim2);
	//initGesture(&hi2c2);

  snakeInitialization();
 8000ef2:	f7ff ffc1 	bl	8000e78 <snakeInitialization>
  while (1)
  {

	 //readGesture();
	 //destinationFlag = decodeGesture(destinationFlag);
	 destinationFlag = decodeButtons(destinationFlag);
 8000ef6:	4b4b      	ldr	r3, [pc, #300]	; (8001024 <main+0x15c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff2a 	bl	8000d54 <decodeButtons>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a48      	ldr	r2, [pc, #288]	; (8001024 <main+0x15c>)
 8000f04:	6013      	str	r3, [r2, #0]
	 gameOverFlag = checkIfHitWall();
 8000f06:	f000 fbb7 	bl	8001678 <checkIfHitWall>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a46      	ldr	r2, [pc, #280]	; (8001028 <main+0x160>)
 8000f0e:	6013      	str	r3, [r2, #0]
	 drawSnake();//warto zaciągnać DMA - chyba
 8000f10:	f000 fb18 	bl	8001544 <drawSnake>
	 drawApple(xApplePosition,yApplePosition);
 8000f14:	4b45      	ldr	r3, [pc, #276]	; (800102c <main+0x164>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4a45      	ldr	r2, [pc, #276]	; (8001030 <main+0x168>)
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fea2 	bl	8000c6c <drawApple>
	 checkIfAppleWasEatan();
 8000f28:	f000 fbc2 	bl	80016b0 <checkIfAppleWasEatan>
	 if(moveFlag){
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <main+0x16c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d007      	beq.n	8000f44 <main+0x7c>
		 move(destinationFlag);
 8000f34:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <main+0x15c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fc85 	bl	8001848 <move>
		 moveFlag = 0;
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <main+0x16c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
	 }
	 if(gameOverFlag){
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <main+0x160>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d4      	beq.n	8000ef6 <main+0x2e>
		 HAL_TIM_Base_Stop(&htim2);
 8000f4c:	483a      	ldr	r0, [pc, #232]	; (8001038 <main+0x170>)
 8000f4e:	f002 fa6e 	bl	800342e <HAL_TIM_Base_Stop>
		 		fillScreen(BLACK);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fb3a 	bl	80005cc <fillScreen>
		 		ST7735_WriteString(30, 55, "GAME     OVER", Font_16x26, YELLOW,BLACK);
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <main+0x174>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	9202      	str	r2, [sp, #8]
 8000f5e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000f62:	9201      	str	r2, [sp, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	9200      	str	r2, [sp, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a35      	ldr	r2, [pc, #212]	; (8001040 <main+0x178>)
 8000f6c:	2137      	movs	r1, #55	; 0x37
 8000f6e:	201e      	movs	r0, #30
 8000f70:	f7ff fd9e 	bl	8000ab0 <ST7735_WriteString>
		 		HAL_Delay(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f000 ff06 	bl	8001d88 <HAL_Delay>
		 		fillScreen(BLACK);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fb25 	bl	80005cc <fillScreen>
		 		int scoreInt = getBodyIndex() - 3;
 8000f82:	f000 fc55 	bl	8001830 <getBodyIndex>
 8000f86:	4603      	mov	r3, r0
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	607b      	str	r3, [r7, #4]
		 		itoa(scoreInt,score,10);
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	492d      	ldr	r1, [pc, #180]	; (8001044 <main+0x17c>)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f003 fa4f 	bl	8004434 <itoa>
		 		while(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0){
 8000f96:	e037      	b.n	8001008 <main+0x140>
		 		//ST7735_WriteString(10, 55, "SCORE: %d",destinationFlag, Font_8x13, YELLOW,BLACK);
		 			ST7735_WriteString(10,95, "To play again", Font_7x10, YELLOW,BLACK);
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <main+0x180>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	9202      	str	r2, [sp, #8]
 8000f9e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fa2:	9201      	str	r2, [sp, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <main+0x184>)
 8000fac:	215f      	movs	r1, #95	; 0x5f
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f7ff fd7e 	bl	8000ab0 <ST7735_WriteString>
		 			ST7735_WriteString(10,105, "press button UP", Font_7x10, YELLOW,BLACK);
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <main+0x180>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	9202      	str	r2, [sp, #8]
 8000fba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fbe:	9201      	str	r2, [sp, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <main+0x188>)
 8000fc8:	2169      	movs	r1, #105	; 0x69
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f7ff fd70 	bl	8000ab0 <ST7735_WriteString>
		 			ST7735_WriteString(20,45, "SCORE:", Font_11x18, GREEN,BLACK);
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <main+0x18c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9202      	str	r2, [sp, #8]
 8000fd6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	9200      	str	r2, [sp, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <main+0x190>)
 8000fe4:	212d      	movs	r1, #45	; 0x2d
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f7ff fd62 	bl	8000ab0 <ST7735_WriteString>
		 			ST7735_WriteString(90,45, score,Font_11x18, GREEN,BLACK);
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <main+0x18c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	9202      	str	r2, [sp, #8]
 8000ff2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000ff6:	9201      	str	r2, [sp, #4]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	9200      	str	r2, [sp, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <main+0x17c>)
 8001000:	212d      	movs	r1, #45	; 0x2d
 8001002:	205a      	movs	r0, #90	; 0x5a
 8001004:	f7ff fd54 	bl	8000ab0 <ST7735_WriteString>
		 		while(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0){
 8001008:	2101      	movs	r1, #1
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <main+0x194>)
 800100c:	f001 f976 	bl	80022fc <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0c0      	beq.n	8000f98 <main+0xd0>
		 		}
		 		gameOverFlag = 0;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <main+0x160>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		 		snakeInitialization();
 800101c:	f7ff ff2c 	bl	8000e78 <snakeInitialization>
	 destinationFlag = decodeButtons(destinationFlag);
 8001020:	e769      	b.n	8000ef6 <main+0x2e>
 8001022:	bf00      	nop
 8001024:	20000420 	.word	0x20000420
 8001028:	20000424 	.word	0x20000424
 800102c:	20000a38 	.word	0x20000a38
 8001030:	20000a3c 	.word	0x20000a3c
 8001034:	2000042c 	.word	0x2000042c
 8001038:	20000348 	.word	0x20000348
 800103c:	200001a0 	.word	0x200001a0
 8001040:	080054a8 	.word	0x080054a8
 8001044:	20000428 	.word	0x20000428
 8001048:	20000190 	.word	0x20000190
 800104c:	080054b8 	.word	0x080054b8
 8001050:	080054c8 	.word	0x080054c8
 8001054:	20000198 	.word	0x20000198
 8001058:	080054d8 	.word	0x080054d8
 800105c:	40020000 	.word	0x40020000

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f003 f9e5 	bl	800443e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <SystemClock_Config+0xb4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <SystemClock_Config+0xb4>)
 800108e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <SystemClock_Config+0xb4>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <SystemClock_Config+0xb8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <SystemClock_Config+0xb8>)
 80010aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <SystemClock_Config+0xb8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fa89 	bl	80025e8 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010dc:	f000 fa0c 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fcec 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001106:	f000 f9f7 	bl	80014f8 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C1_Init+0x50>)
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <MX_I2C1_Init+0x54>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C1_Init+0x50>)
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_I2C1_Init+0x58>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_I2C1_Init+0x50>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_I2C1_Init+0x50>)
 800115a:	f001 f901 	bl	8002360 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 f9c8 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000248 	.word	0x20000248
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0

08001178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C2_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C2_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C2_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C2_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C2_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C2_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C2_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C2_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C2_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C2_Init+0x50>)
 80011b6:	f001 f8d3 	bl	8002360 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f99a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000029c 	.word	0x2000029c
 80011cc:	40005800 	.word	0x40005800
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_SPI1_Init+0x68>)
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <MX_SPI1_Init+0x6c>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x68>)
 80011e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_SPI1_Init+0x68>)
 80011e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_SPI1_Init+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_SPI1_Init+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x68>)
 8001202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001206:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x68>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_SPI1_Init+0x68>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x68>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_SPI1_Init+0x68>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x68>)
 8001222:	220a      	movs	r2, #10
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_SPI1_Init+0x68>)
 8001228:	f001 fe22 	bl	8002e70 <HAL_SPI_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001232:	f000 f961 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002f0 	.word	0x200002f0
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM2_Init+0x98>)
 8001262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM2_Init+0x98>)
 800126a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM2_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM2_Init+0x98>)
 8001278:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800127c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM2_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM2_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_TIM2_Init+0x98>)
 800128c:	f002 f880 	bl	8003390 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 f92f 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM2_Init+0x98>)
 80012a8:	f002 fa52 	bl	8003750 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012b2:	f000 f921 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM2_Init+0x98>)
 80012c4:	f002 fc58 	bl	8003b78 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ce:	f000 f913 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000348 	.word	0x20000348

080012e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM5_Init+0x94>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <MX_TIM5_Init+0x98>)
 8001300:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM5_Init+0x94>)
 8001304:	220f      	movs	r2, #15
 8001306:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM5_Init+0x94>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM5_Init+0x94>)
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_TIM5_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM5_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM5_Init+0x94>)
 8001324:	f002 f834 	bl	8003390 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800132e:	f000 f8e3 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_TIM5_Init+0x94>)
 8001340:	f002 fa06 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 f8d5 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM5_Init+0x94>)
 800135c:	f002 fc0c 	bl	8003b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001366:	f000 f8c7 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000390 	.word	0x20000390
 8001378:	40000c00 	.word	0x40000c00

0800137c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_TIM11_Init+0x40>)
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_TIM11_Init+0x44>)
 8001384:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_TIM11_Init+0x40>)
 8001388:	2263      	movs	r2, #99	; 0x63
 800138a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_TIM11_Init+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 16000-1;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_TIM11_Init+0x40>)
 8001394:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001398:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_TIM11_Init+0x40>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_TIM11_Init+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_TIM11_Init+0x40>)
 80013a8:	f001 fff2 	bl	8003390 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013b2:	f000 f8a1 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003d8 	.word	0x200003d8
 80013c0:	40014800 	.word	0x40014800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x124>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <MX_GPIO_Init+0x124>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <MX_GPIO_Init+0x124>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_GPIO_Init+0x124>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <MX_GPIO_Init+0x124>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <MX_GPIO_Init+0x124>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <MX_GPIO_Init+0x124>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <MX_GPIO_Init+0x124>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_GPIO_Init+0x124>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001434:	482d      	ldr	r0, [pc, #180]	; (80014ec <MX_GPIO_Init+0x128>)
 8001436:	f000 ff79 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001440:	482b      	ldr	r0, [pc, #172]	; (80014f0 <MX_GPIO_Init+0x12c>)
 8001442:	f000 ff73 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800144c:	4829      	ldr	r0, [pc, #164]	; (80014f4 <MX_GPIO_Init+0x130>)
 800144e:	f000 ff6d 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <MX_GPIO_Init+0x128>)
 800146c:	f000 fdc2 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|LEFT_Pin|RIGHT_Pin;
 8001470:	230f      	movs	r3, #15
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	481c      	ldr	r0, [pc, #112]	; (80014f4 <MX_GPIO_Init+0x130>)
 8001484:	f000 fdb6 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin PB6 */
  GPIO_InitStruct.Pin = SCL_Pin|GPIO_PIN_6;
 8001488:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_GPIO_Init+0x12c>)
 80014a2:	f000 fda7 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDO_Pin */
  GPIO_InitStruct.Pin = SDO_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDO_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_GPIO_Init+0x12c>)
 80014bc:	f000 fd9a 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 80014c0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_GPIO_Init+0x130>)
 80014da:	f000 fd8b 	bl	8001ff4 <HAL_GPIO_Init>

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020000 	.word	0x40020000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <snakeInit>:
int snakeBody[384];
int bodyIndex;
int xApplePosition;
int yApplePosition;
extern TIM_HandleTypeDef htim2;
void snakeInit(){
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	snakeBody[0]= 34;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <snakeInit+0x38>)
 800150a:	2222      	movs	r2, #34	; 0x22
 800150c:	601a      	str	r2, [r3, #0]
	snakeBody[1]= 100;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <snakeInit+0x38>)
 8001510:	2264      	movs	r2, #100	; 0x64
 8001512:	605a      	str	r2, [r3, #4]
	snakeBody[2]= 24;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <snakeInit+0x38>)
 8001516:	2218      	movs	r2, #24
 8001518:	609a      	str	r2, [r3, #8]
	snakeBody[3]= 100;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <snakeInit+0x38>)
 800151c:	2264      	movs	r2, #100	; 0x64
 800151e:	60da      	str	r2, [r3, #12]
	snakeBody[4]= 14;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <snakeInit+0x38>)
 8001522:	220e      	movs	r2, #14
 8001524:	611a      	str	r2, [r3, #16]
	snakeBody[5]= 100;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <snakeInit+0x38>)
 8001528:	2264      	movs	r2, #100	; 0x64
 800152a:	615a      	str	r2, [r3, #20]
	bodyIndex = 3;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <snakeInit+0x3c>)
 800152e:	2203      	movs	r2, #3
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000434 	.word	0x20000434
 8001540:	20000a34 	.word	0x20000a34

08001544 <drawSnake>:
void drawSnake(){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
	for(int i = 0; i< bodyIndex*2; i = i+2){
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e013      	b.n	8001578 <drawSnake+0x34>
		fillRect(snakeBody[i], snakeBody[i+1], 10, 10, BLUE);
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <drawSnake+0x4c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	b218      	sxth	r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <drawSnake+0x4c>)
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	b219      	sxth	r1, r3
 8001566:	231f      	movs	r3, #31
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	230a      	movs	r3, #10
 800156c:	220a      	movs	r2, #10
 800156e:	f7ff f811 	bl	8000594 <fillRect>
	for(int i = 0; i< bodyIndex*2; i = i+2){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3302      	adds	r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <drawSnake+0x50>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbe5      	blt.n	8001550 <drawSnake+0xc>
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000434 	.word	0x20000434
 8001594:	20000a34 	.word	0x20000a34

08001598 <moveSnake>:
void moveSnake(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
	fillRect(snakeBody[(bodyIndex*2)-2], snakeBody[(bodyIndex*2)-1], 10, 10, GREEN);
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <moveSnake+0x68>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <moveSnake+0x6c>)
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	b218      	sxth	r0, r3
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <moveSnake+0x68>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <moveSnake+0x6c>)
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	b219      	sxth	r1, r3
 80015be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	230a      	movs	r3, #10
 80015c6:	220a      	movs	r2, #10
 80015c8:	f7fe ffe4 	bl	8000594 <fillRect>
			 for(int i = (bodyIndex*2)-1; i > 1; i= i -1){
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <moveSnake+0x68>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	e00b      	b.n	80015f0 <moveSnake+0x58>
			 		 snakeBody[i] = snakeBody[i-2];
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b02      	subs	r3, #2
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <moveSnake+0x6c>)
 80015de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <moveSnake+0x6c>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 for(int i = (bodyIndex*2)-1; i > 1; i= i -1){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	dcf0      	bgt.n	80015d8 <moveSnake+0x40>
			 	 }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000a34 	.word	0x20000a34
 8001604:	20000434 	.word	0x20000434

08001608 <goingLeft>:

void goingLeft(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	moveSnake();
 800160c:	f7ff ffc4 	bl	8001598 <moveSnake>
	snakeBody[0] = snakeBody[0]-10;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <goingLeft+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3b0a      	subs	r3, #10
 8001616:	4a02      	ldr	r2, [pc, #8]	; (8001620 <goingLeft+0x18>)
 8001618:	6013      	str	r3, [r2, #0]

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000434 	.word	0x20000434

08001624 <goingRight>:
void goingRight(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	moveSnake();
 8001628:	f7ff ffb6 	bl	8001598 <moveSnake>
	snakeBody[0] = snakeBody[0]+10;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <goingRight+0x18>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	330a      	adds	r3, #10
 8001632:	4a02      	ldr	r2, [pc, #8]	; (800163c <goingRight+0x18>)
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000434 	.word	0x20000434

08001640 <goingUp>:
void goingUp(){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	moveSnake();
 8001644:	f7ff ffa8 	bl	8001598 <moveSnake>
	snakeBody[1] = snakeBody[1]-10;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <goingUp+0x18>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	3b0a      	subs	r3, #10
 800164e:	4a02      	ldr	r2, [pc, #8]	; (8001658 <goingUp+0x18>)
 8001650:	6053      	str	r3, [r2, #4]
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000434 	.word	0x20000434

0800165c <goingDown>:
void goingDown(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	moveSnake();
 8001660:	f7ff ff9a 	bl	8001598 <moveSnake>
	snakeBody[1] = snakeBody[1]+10;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <goingDown+0x18>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	330a      	adds	r3, #10
 800166a:	4a02      	ldr	r2, [pc, #8]	; (8001674 <goingDown+0x18>)
 800166c:	6053      	str	r3, [r2, #4]
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000434 	.word	0x20000434

08001678 <checkIfHitWall>:
int checkIfHitWall(){
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	if(snakeBody[0] == 4 || snakeBody[0] == 124 || snakeBody[1] == 0 || snakeBody[1] == 160  ){
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <checkIfHitWall+0x34>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00b      	beq.n	800169c <checkIfHitWall+0x24>
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <checkIfHitWall+0x34>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b7c      	cmp	r3, #124	; 0x7c
 800168a:	d007      	beq.n	800169c <checkIfHitWall+0x24>
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <checkIfHitWall+0x34>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <checkIfHitWall+0x24>
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <checkIfHitWall+0x34>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2ba0      	cmp	r3, #160	; 0xa0
 800169a:	d101      	bne.n	80016a0 <checkIfHitWall+0x28>
			return 1;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <checkIfHitWall+0x2a>
	}
	return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000434 	.word	0x20000434

080016b0 <checkIfAppleWasEatan>:
void checkIfAppleWasEatan(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af02      	add	r7, sp, #8
	if(abs(snakeBody[0]-xApplePosition) < 10 && abs(snakeBody[1]-yApplePosition)<10){
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <checkIfAppleWasEatan+0xd8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f113 0f09 	cmn.w	r3, #9
 80016c4:	db5b      	blt.n	800177e <checkIfAppleWasEatan+0xce>
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <checkIfAppleWasEatan+0xd8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	dc54      	bgt.n	800177e <checkIfAppleWasEatan+0xce>
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <checkIfAppleWasEatan+0xdc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f113 0f09 	cmn.w	r3, #9
 80016e2:	db4c      	blt.n	800177e <checkIfAppleWasEatan+0xce>
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <checkIfAppleWasEatan+0xdc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b09      	cmp	r3, #9
 80016f0:	dc45      	bgt.n	800177e <checkIfAppleWasEatan+0xce>
		fillRect(xApplePosition, yApplePosition, 10, 10, BLUE);
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <checkIfAppleWasEatan+0xd8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b218      	sxth	r0, r3
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <checkIfAppleWasEatan+0xdc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b219      	sxth	r1, r3
 80016fe:	231f      	movs	r3, #31
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	230a      	movs	r3, #10
 8001704:	220a      	movs	r2, #10
 8001706:	f7fe ff45 	bl	8000594 <fillRect>
		bodyIndex++;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 8001712:	6013      	str	r3, [r2, #0]
		snakeBody[(bodyIndex*2)-1]=snakeBody[(bodyIndex*2)-3];
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	1eda      	subs	r2, r3, #3
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	4917      	ldr	r1, [pc, #92]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 8001726:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800172a:	4916      	ldr	r1, [pc, #88]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snakeBody[(bodyIndex*2)-2]=snakeBody[(bodyIndex*2)-4];
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b02      	subs	r3, #2
 8001736:	005a      	lsls	r2, r3, #1
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <checkIfAppleWasEatan+0xe0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 8001742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001746:	490f      	ldr	r1, [pc, #60]	; (8001784 <checkIfAppleWasEatan+0xd4>)
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		xApplePosition = random_int(4,110)+4;
 800174c:	216e      	movs	r1, #110	; 0x6e
 800174e:	2004      	movs	r0, #4
 8001750:	f000 f842 	bl	80017d8 <random_int>
 8001754:	4603      	mov	r3, r0
 8001756:	3304      	adds	r3, #4
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <checkIfAppleWasEatan+0xd8>)
 800175a:	6013      	str	r3, [r2, #0]
		yApplePosition = random_int(0,150);
 800175c:	2196      	movs	r1, #150	; 0x96
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f83a 	bl	80017d8 <random_int>
 8001764:	4603      	mov	r3, r0
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <checkIfAppleWasEatan+0xdc>)
 8001768:	6013      	str	r3, [r2, #0]
		drawApple(xApplePosition,yApplePosition);
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <checkIfAppleWasEatan+0xd8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <checkIfAppleWasEatan+0xdc>)
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	b292      	uxth	r2, r2
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa77 	bl	8000c6c <drawApple>
	}
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000434 	.word	0x20000434
 8001788:	20000a38 	.word	0x20000a38
 800178c:	20000a3c 	.word	0x20000a3c
 8001790:	20000a34 	.word	0x20000a34

08001794 <initApple>:

void initApple(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	xApplePosition = random_int(4,120)+4;
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	2004      	movs	r0, #4
 800179c:	f000 f81c 	bl	80017d8 <random_int>
 80017a0:	4603      	mov	r3, r0
 80017a2:	3304      	adds	r3, #4
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <initApple+0x3c>)
 80017a6:	6013      	str	r3, [r2, #0]
	yApplePosition = random_int(0,160);
 80017a8:	21a0      	movs	r1, #160	; 0xa0
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f814 	bl	80017d8 <random_int>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <initApple+0x40>)
 80017b4:	6013      	str	r3, [r2, #0]
	//TO-DO algortm sprawdzania czy nie wygenerowałes jabłka na węzu
	drawApple(xApplePosition,yApplePosition);
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <initApple+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <initApple+0x40>)
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	b292      	uxth	r2, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fa51 	bl	8000c6c <drawApple>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000a38 	.word	0x20000a38
 80017d4:	20000a3c 	.word	0x20000a3c

080017d8 <random_int>:
/*
 * Funkcja odpowiedzialna za generacje pozycji jabłka, zwraca pseudolosowa wartość,
 * z zadnego przedziału. Wygenerowana wartość musi być wielokrotnością 10.
 *
 */
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	int returnValue = min + rand() % (max+1 - min);
 80017e2:	f002 ff3f 	bl	8004664 <rand>
 80017e6:	4602      	mov	r2, r0
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	fb92 f1f3 	sdiv	r1, r2, r3
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
	returnValue = returnValue + (10-returnValue%10);
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <random_int+0x54>)
 8001804:	fb83 2301 	smull	r2, r3, r3, r1
 8001808:	109a      	asrs	r2, r3, #2
 800180a:	17cb      	asrs	r3, r1, #31
 800180c:	1ad2      	subs	r2, r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	1aca      	subs	r2, r1, r3
 8001818:	f1c2 030a 	rsb	r3, r2, #10
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
   return returnValue;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	66666667 	.word	0x66666667

08001830 <getBodyIndex>:
int getBodyIndex(){
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	return bodyIndex;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <getBodyIndex+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000a34 	.word	0x20000a34

08001848 <move>:
void move(int destinationFlag){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	switch(destinationFlag)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d816      	bhi.n	8001884 <move+0x3c>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <move+0x14>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	0800186d 	.word	0x0800186d
 8001860:	08001873 	.word	0x08001873
 8001864:	08001879 	.word	0x08001879
 8001868:	0800187f 	.word	0x0800187f
	{
	case 0:
		goingDown();
 800186c:	f7ff fef6 	bl	800165c <goingDown>
		break;
 8001870:	e008      	b.n	8001884 <move+0x3c>
	case 1:
		goingRight();
 8001872:	f7ff fed7 	bl	8001624 <goingRight>
		break;
 8001876:	e005      	b.n	8001884 <move+0x3c>
	case 2:
		goingLeft();
 8001878:	f7ff fec6 	bl	8001608 <goingLeft>
		break;
 800187c:	e002      	b.n	8001884 <move+0x3c>
	case 3:
		goingUp();
 800187e:	f7ff fedf 	bl	8001640 <goingUp>
		break;
 8001882:	bf00      	nop
	}
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12d      	bne.n	800195a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a39      	ldr	r2, [pc, #228]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800191a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192c:	2304      	movs	r3, #4
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	482e      	ldr	r0, [pc, #184]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001938:	f000 fb5c 	bl	8001ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_I2C_MspInit+0x110>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001958:	e041      	b.n	80019de <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_I2C_MspInit+0x118>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d13c      	bne.n	80019de <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_I2C_MspInit+0x110>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_I2C_MspInit+0x110>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001992:	2304      	movs	r3, #4
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4814      	ldr	r0, [pc, #80]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 800199e:	f000 fb29 	bl	8001ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019b2:	2309      	movs	r3, #9
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 80019be:	f000 fb19 	bl	8001ff4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_I2C_MspInit+0x110>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_I2C_MspInit+0x110>)
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_I2C_MspInit+0x110>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	bf00      	nop
 80019e0:	3730      	adds	r7, #48	; 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40005800 	.word	0x40005800

080019f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_SPI_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a52:	23a0      	movs	r3, #160	; 0xa0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	f000 fac1 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d116      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	201c      	movs	r0, #28
 8001abc:	f000 fa63 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac0:	201c      	movs	r0, #28
 8001ac2:	f000 fa7c 	bl	8001fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001ac6:	e02e      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_TIM_Base_MspInit+0xac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	e01a      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_TIM_Base_MspInit+0xb0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d115      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0xa8>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201a      	movs	r0, #26
 8001b1c:	f000 fa33 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b20:	201a      	movs	r0, #26
 8001b22:	f000 fa4c 	bl	8001fbe <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40000c00 	.word	0x40000c00
 8001b38:	40014800 	.word	0x40014800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f8de 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b96:	f001 fcd3 	bl	8003540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003d8 	.word	0x200003d8

08001ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <TIM2_IRQHandler+0x14>)
 8001baa:	f001 fcc9 	bl	8003540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  moveFlag = 1;
 8001bae:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <TIM2_IRQHandler+0x18>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000348 	.word	0x20000348
 8001bbc:	2000042c 	.word	0x2000042c

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f002 fae8 	bl	80041c4 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20020000 	.word	0x20020000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	20000a40 	.word	0x20000a40
 8001c28:	20000b08 	.word	0x20000b08

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	; (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f002 fb9d 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff f921 	bl	8000ec8 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001c94:	08007f18 	.word	0x08007f18
  ldr r2, =_sbss
 8001c98:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001c9c:	20000b04 	.word	0x20000b04

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f94f 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fdd8 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f967 	bl	8001fda <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f92f 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200001a8 	.word	0x200001a8
 8001d40:	200001b0 	.word	0x200001b0
 8001d44:	200001ac 	.word	0x200001ac

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200001b0 	.word	0x200001b0
 8001d6c:	20000a44 	.word	0x20000a44

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000a44 	.word	0x20000a44

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200001b0 	.word	0x200001b0

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff3e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff31 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa2 	bl	8001f2c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e159      	b.n	80022c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002010:	2201      	movs	r2, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	f040 8148 	bne.w	80022be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d005      	beq.n	8002046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	2b02      	cmp	r3, #2
 8002044:	d130      	bne.n	80020a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 0201 	and.w	r2, r3, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d017      	beq.n	80020e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d123      	bne.n	8002138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a2 	beq.w	80022be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_GPIO_Init+0x2e8>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a56      	ldr	r2, [pc, #344]	; (80022dc <HAL_GPIO_Init+0x2e8>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b54      	ldr	r3, [pc, #336]	; (80022dc <HAL_GPIO_Init+0x2e8>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002196:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x2ec>)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_GPIO_Init+0x2f0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x202>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_GPIO_Init+0x2f4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x1fe>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a47      	ldr	r2, [pc, #284]	; (80022ec <HAL_GPIO_Init+0x2f8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a46      	ldr	r2, [pc, #280]	; (80022f0 <HAL_GPIO_Init+0x2fc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <HAL_GPIO_Init+0x300>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x1f2>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x204>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x204>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x204>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x204>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x204>
 80021f6:	2300      	movs	r3, #0
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002208:	4935      	ldr	r1, [pc, #212]	; (80022e0 <HAL_GPIO_Init+0x2ec>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_GPIO_Init+0x304>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <HAL_GPIO_Init+0x304>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_GPIO_Init+0x304>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_GPIO_Init+0x304>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_GPIO_Init+0x304>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_GPIO_Init+0x304>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_GPIO_Init+0x304>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_GPIO_Init+0x304>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	f67f aea2 	bls.w	8002010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e001      	b.n	800231e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e12b      	b.n	80025ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff faa8 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c4:	f000 fd40 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a81      	ldr	r2, [pc, #516]	; (80025d4 <HAL_I2C_Init+0x274>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d807      	bhi.n	80023e4 <HAL_I2C_Init+0x84>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a80      	ldr	r2, [pc, #512]	; (80025d8 <HAL_I2C_Init+0x278>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e006      	b.n	80023f2 <HAL_I2C_Init+0x92>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a7d      	ldr	r2, [pc, #500]	; (80025dc <HAL_I2C_Init+0x27c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0e7      	b.n	80025ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a78      	ldr	r2, [pc, #480]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9b      	lsrs	r3, r3, #18
 8002404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <HAL_I2C_Init+0x274>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d802      	bhi.n	8002434 <HAL_I2C_Init+0xd4>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	e009      	b.n	8002448 <HAL_I2C_Init+0xe8>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <HAL_I2C_Init+0x284>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	3301      	adds	r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800245a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	495c      	ldr	r1, [pc, #368]	; (80025d4 <HAL_I2C_Init+0x274>)
 8002464:	428b      	cmp	r3, r1
 8002466:	d819      	bhi.n	800249c <HAL_I2C_Init+0x13c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fbb1 f3f3 	udiv	r3, r1, r3
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800247c:	400b      	ands	r3, r1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_I2C_Init+0x138>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e59      	subs	r1, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002496:	e051      	b.n	800253c <HAL_I2C_Init+0x1dc>
 8002498:	2304      	movs	r3, #4
 800249a:	e04f      	b.n	800253c <HAL_I2C_Init+0x1dc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d111      	bne.n	80024c8 <HAL_I2C_Init+0x168>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e58      	subs	r0, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e012      	b.n	80024ee <HAL_I2C_Init+0x18e>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Init+0x196>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e022      	b.n	800253c <HAL_I2C_Init+0x1dc>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10e      	bne.n	800251c <HAL_I2C_Init+0x1bc>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e58      	subs	r0, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	440b      	add	r3, r1
 800250c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	e00f      	b.n	800253c <HAL_I2C_Init+0x1dc>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	0099      	lsls	r1, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	6809      	ldr	r1, [r1, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800256a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6911      	ldr	r1, [r2, #16]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68d2      	ldr	r2, [r2, #12]
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	000186a0 	.word	0x000186a0
 80025d8:	001e847f 	.word	0x001e847f
 80025dc:	003d08ff 	.word	0x003d08ff
 80025e0:	431bde83 	.word	0x431bde83
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e267      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	2b08      	cmp	r3, #8
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e242      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a75      	ldr	r2, [pc, #468]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b70      	ldr	r3, [pc, #448]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6f      	ldr	r2, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fb66 	bl	8001d70 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fb62 	bl	8001d70 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e207      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fb52 	bl	8001d70 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff fb4e 	bl	8001d70 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1f3      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c7      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff fb07 	bl	8001d70 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff fb03 	bl	8001d70 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a8      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4925      	ldr	r1, [pc, #148]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff fae6 	bl	8001d70 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a8:	f7ff fae2 	bl	8001d70 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e187      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff fac6 	bl	8001d70 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff fac2 	bl	8001d70 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e167      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 8002806:	e01b      	b.n	8002840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff faaf 	bl	8001d70 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e00e      	b.n	8002834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff faab 	bl	8001d70 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d907      	bls.n	8002834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e150      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	42470000 	.word	0x42470000
 8002830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ea      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8097 	beq.w	800297c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b7d      	ldr	r3, [pc, #500]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b77      	ldr	r3, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7ff fa6b 	bl	8001d70 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7ff fa67 	bl	8001d70 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e10c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2ea>
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x30c>
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a5e      	ldr	r2, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028f4:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7ff fa2c 	bl	8001d70 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7ff fa28 	bl	8001d70 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0cb      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x334>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7ff fa16 	bl	8001d70 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7ff fa12 	bl	8001d70 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0b5      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a1 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d05c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d141      	bne.n	8002a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff f9e6 	bl	8001d70 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f9e2 	bl	8001d70 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e087      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff f9bb 	bl	8001d70 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7ff f9b7 	bl	8001d70 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e05c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x416>
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f9a4 	bl	8001d70 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff f9a0 	bl	8001d70 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e045      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x444>
 8002a4a:	e03d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e038      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0cc      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d90c      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d044      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e067      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4934      	ldr	r1, [pc, #208]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7ff f8d2 	bl	8001d70 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7ff f8ce 	bl	8001d70 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20c      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f832 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08007d68 	.word	0x08007d68
 8002c9c:	200001a8 	.word	0x200001a8
 8002ca0:	200001ac 	.word	0x200001ac

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b090      	sub	sp, #64	; 0x40
 8002caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	f200 80a1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd6:	e09b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cdc:	e09b      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce2:	e098      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	627a      	str	r2, [r7, #36]	; 0x24
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	fb03 f201 	mul.w	r2, r3, r1
 8002d14:	2300      	movs	r3, #0
 8002d16:	fb00 f303 	mul.w	r3, r0, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d24:	460a      	mov	r2, r1
 8002d26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	2200      	movs	r2, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	61fa      	str	r2, [r7, #28]
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d3e:	f7fd faa7 	bl	8000290 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4613      	mov	r3, r2
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	e053      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	2200      	movs	r2, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	617a      	str	r2, [r7, #20]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d5e:	f04f 0b00 	mov.w	fp, #0
 8002d62:	4652      	mov	r2, sl
 8002d64:	465b      	mov	r3, fp
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	0159      	lsls	r1, r3, #5
 8002d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d74:	0150      	lsls	r0, r2, #5
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d96:	ebb2 0408 	subs.w	r4, r2, r8
 8002d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	00eb      	lsls	r3, r5, #3
 8002da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dac:	00e2      	lsls	r2, r4, #3
 8002dae:	4614      	mov	r4, r2
 8002db0:	461d      	mov	r5, r3
 8002db2:	eb14 030a 	adds.w	r3, r4, sl
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	eb45 030b 	adc.w	r3, r5, fp
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	2200      	movs	r2, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	60fa      	str	r2, [r7, #12]
 8002de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de8:	f7fd fa52 	bl	8000290 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3740      	adds	r7, #64	; 0x40
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	017d7840 	.word	0x017d7840

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	200001a8 	.word	0x200001a8

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08007d78 	.word	0x08007d78

08002e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07b      	b.n	8002f7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d108      	bne.n	8002e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e92:	d009      	beq.n	8002ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
 8002e9a:	e005      	b.n	8002ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fd98 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0104 	and.w	r1, r3, #4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0210 	and.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b088      	sub	sp, #32
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_SPI_Transmit+0x22>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e126      	b.n	80031f2 <HAL_SPI_Transmit+0x270>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fac:	f7fe fee0 	bl	8001d70 <HAL_GetTick>
 8002fb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fc6:	e10b      	b.n	80031e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x52>
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd8:	e102      	b.n	80031e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003020:	d10f      	bne.n	8003042 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d007      	beq.n	8003060 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003068:	d14b      	bne.n	8003102 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0xf6>
 8003072:	8afb      	ldrh	r3, [r7, #22]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d13e      	bne.n	80030f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800309c:	e02b      	b.n	80030f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d112      	bne.n	80030d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	1c9a      	adds	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80030d0:	e011      	b.n	80030f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030d2:	f7fe fe4d 	bl	8001d70 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d803      	bhi.n	80030ea <HAL_SPI_Transmit+0x168>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d102      	bne.n	80030f0 <HAL_SPI_Transmit+0x16e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030f4:	e074      	b.n	80031e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ce      	bne.n	800309e <HAL_SPI_Transmit+0x11c>
 8003100:	e04c      	b.n	800319c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Transmit+0x18e>
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d140      	bne.n	8003192 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003136:	e02c      	b.n	8003192 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d113      	bne.n	800316e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
 800316c:	e011      	b.n	8003192 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316e:	f7fe fdff 	bl	8001d70 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d803      	bhi.n	8003186 <HAL_SPI_Transmit+0x204>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d102      	bne.n	800318c <HAL_SPI_Transmit+0x20a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003190:	e026      	b.n	80031e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1cd      	bne.n	8003138 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8b3 	bl	800330c <SPI_EndRxTxTransaction>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e000      	b.n	80031e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800320c:	f7fe fdb0 	bl	8001d70 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800321c:	f7fe fda8 	bl	8001d70 <HAL_GetTick>
 8003220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	015b      	lsls	r3, r3, #5
 8003228:	0d1b      	lsrs	r3, r3, #20
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003232:	e054      	b.n	80032de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d050      	beq.n	80032de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800323c:	f7fe fd98 	bl	8001d70 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d902      	bls.n	8003252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d13d      	bne.n	80032ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d111      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003274:	d004      	beq.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d107      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d10f      	bne.n	80032ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e017      	b.n	80032fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3b01      	subs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d19b      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200001a8 	.word	0x200001a8

0800330c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <SPI_EndRxTxTransaction+0x7c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <SPI_EndRxTxTransaction+0x80>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0d5b      	lsrs	r3, r3, #21
 8003324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003336:	d112      	bne.n	800335e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff ff5a 	bl	80031fc <SPI_WaitFlagStateUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e00f      	b.n	800337e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3b01      	subs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d0f2      	beq.n	800335e <SPI_EndRxTxTransaction+0x52>
 8003378:	e000      	b.n	800337c <SPI_EndRxTxTransaction+0x70>
        break;
 800337a:	bf00      	nop
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200001a8 	.word	0x200001a8
 800338c:	165e9f81 	.word	0x165e9f81

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e041      	b.n	8003426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fb66 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 fab8 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_TIM_Base_Stop+0x38>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	f240 4344 	movw	r3, #1092	; 0x444
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_TIM_Base_Stop+0x38>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d001      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e044      	b.n	800351e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_TIM_Base_Start_IT+0xb0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d018      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x6c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d013      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x6c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_TIM_Base_Start_IT+0xb4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x6c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_TIM_Base_Start_IT+0xb8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x6c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_TIM_Base_Start_IT+0xbc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x6c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <HAL_TIM_Base_Start_IT+0xc0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d111      	bne.n	800350c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d010      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350a:	e007      	b.n	800351c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40014000 	.word	0x40014000

08003540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0202 	mvn.w	r2, #2
 800356c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9bf 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9b1 	bl	80038f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9c2 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0204 	mvn.w	r2, #4
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f995 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f987 	bl	80038f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f998 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0208 	mvn.w	r2, #8
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2204      	movs	r2, #4
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f96b 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f95d 	bl	80038f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f96e 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b10      	cmp	r3, #16
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0210 	mvn.w	r2, #16
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2208      	movs	r2, #8
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f941 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f933 	bl	80038f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f944 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0201 	mvn.w	r2, #1
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f90d 	bl	80038de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d10e      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	2b80      	cmp	r3, #128	; 0x80
 80036de:	d107      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fabc 	bl	8003c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d10e      	bne.n	800371c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d107      	bne.n	800371c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f909 	bl	800392e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b20      	cmp	r3, #32
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0220 	mvn.w	r2, #32
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa86 	bl	8003c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIM_ConfigClockSource+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e0b4      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x186>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xd4>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x172>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xa6>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x11a>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xfa>
 80037d0:	2b50      	cmp	r3, #80	; 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x13a>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b30      	cmp	r3, #48	; 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b30      	cmp	r3, #48	; 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f000 f997 	bl	8003b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 f980 	bl	8003b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 f8f4 	bl	8003a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	; 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f94d 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 f913 	bl	8003aa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	; 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f93d 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 f8d4 	bl	8003a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f92d 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 f924 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <TIM_Base_SetConfig+0xe4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00f      	beq.n	800397c <TIM_Base_SetConfig+0x38>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003962:	d00b      	beq.n	800397c <TIM_Base_SetConfig+0x38>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <TIM_Base_SetConfig+0xe8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0x38>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <TIM_Base_SetConfig+0xec>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <TIM_Base_SetConfig+0xf0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d108      	bne.n	800398e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <TIM_Base_SetConfig+0xe4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01b      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d017      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <TIM_Base_SetConfig+0xe8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_Base_SetConfig+0xec>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <TIM_Base_SetConfig+0xf0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <TIM_Base_SetConfig+0xf4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <TIM_Base_SetConfig+0xf8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <TIM_Base_SetConfig+0xfc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800

08003a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f023 0201 	bic.w	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 030a 	bic.w	r3, r3, #10
 8003a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b087      	sub	sp, #28
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	031b      	lsls	r3, r3, #12
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f043 0307 	orr.w	r3, r3, #7
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	021a      	lsls	r2, r3, #8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e050      	b.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bdc:	d013      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10c      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40014000 	.word	0x40014000

08003c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <findslot>:
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <findslot+0x2c>)
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	4604      	mov	r4, r0
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	b118      	cbz	r0, 8003c8e <findslot+0x12>
 8003c86:	6983      	ldr	r3, [r0, #24]
 8003c88:	b90b      	cbnz	r3, 8003c8e <findslot+0x12>
 8003c8a:	f000 faf9 	bl	8004280 <__sinit>
 8003c8e:	2c13      	cmp	r4, #19
 8003c90:	d807      	bhi.n	8003ca2 <findslot+0x26>
 8003c92:	4806      	ldr	r0, [pc, #24]	; (8003cac <findslot+0x30>)
 8003c94:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003c98:	3201      	adds	r2, #1
 8003c9a:	d002      	beq.n	8003ca2 <findslot+0x26>
 8003c9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e7fc      	b.n	8003ca0 <findslot+0x24>
 8003ca6:	bf00      	nop
 8003ca8:	200001bc 	.word	0x200001bc
 8003cac:	20000a54 	.word	0x20000a54

08003cb0 <error>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	f000 fa86 	bl	80041c4 <__errno>
 8003cb8:	2613      	movs	r6, #19
 8003cba:	4605      	mov	r5, r0
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	beab      	bkpt	0x00ab
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	602e      	str	r6, [r5, #0]
 8003cc8:	4620      	mov	r0, r4
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ccc <checkerror>:
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d101      	bne.n	8003cd4 <checkerror+0x8>
 8003cd0:	f7ff bfee 	b.w	8003cb0 <error>
 8003cd4:	4770      	bx	lr

08003cd6 <_swiread>:
 8003cd6:	b530      	push	{r4, r5, lr}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003cde:	9203      	str	r2, [sp, #12]
 8003ce0:	2406      	movs	r4, #6
 8003ce2:	ad01      	add	r5, sp, #4
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	beab      	bkpt	0x00ab
 8003cea:	4604      	mov	r4, r0
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff ffed 	bl	8003ccc <checkerror>
 8003cf2:	b005      	add	sp, #20
 8003cf4:	bd30      	pop	{r4, r5, pc}

08003cf6 <_read>:
 8003cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	9101      	str	r1, [sp, #4]
 8003cfc:	f7ff ffbe 	bl	8003c7c <findslot>
 8003d00:	9901      	ldr	r1, [sp, #4]
 8003d02:	4604      	mov	r4, r0
 8003d04:	b938      	cbnz	r0, 8003d16 <_read+0x20>
 8003d06:	f000 fa5d 	bl	80041c4 <__errno>
 8003d0a:	2309      	movs	r3, #9
 8003d0c:	6003      	str	r3, [r0, #0]
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	b003      	add	sp, #12
 8003d14:	bd30      	pop	{r4, r5, pc}
 8003d16:	6800      	ldr	r0, [r0, #0]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	f7ff ffdc 	bl	8003cd6 <_swiread>
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	d0f7      	beq.n	8003d12 <_read+0x1c>
 8003d22:	6863      	ldr	r3, [r4, #4]
 8003d24:	1a2a      	subs	r2, r5, r0
 8003d26:	4413      	add	r3, r2
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	e7f1      	b.n	8003d12 <_read+0x1c>

08003d2e <_swilseek>:
 8003d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d30:	460c      	mov	r4, r1
 8003d32:	4616      	mov	r6, r2
 8003d34:	f7ff ffa2 	bl	8003c7c <findslot>
 8003d38:	4605      	mov	r5, r0
 8003d3a:	b940      	cbnz	r0, 8003d4e <_swilseek+0x20>
 8003d3c:	f000 fa42 	bl	80041c4 <__errno>
 8003d40:	2309      	movs	r3, #9
 8003d42:	6003      	str	r3, [r0, #0]
 8003d44:	f04f 34ff 	mov.w	r4, #4294967295
 8003d48:	4620      	mov	r0, r4
 8003d4a:	b003      	add	sp, #12
 8003d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d4e:	2e02      	cmp	r6, #2
 8003d50:	d903      	bls.n	8003d5a <_swilseek+0x2c>
 8003d52:	f000 fa37 	bl	80041c4 <__errno>
 8003d56:	2316      	movs	r3, #22
 8003d58:	e7f3      	b.n	8003d42 <_swilseek+0x14>
 8003d5a:	2e01      	cmp	r6, #1
 8003d5c:	d112      	bne.n	8003d84 <_swilseek+0x56>
 8003d5e:	6843      	ldr	r3, [r0, #4]
 8003d60:	18e4      	adds	r4, r4, r3
 8003d62:	d4f6      	bmi.n	8003d52 <_swilseek+0x24>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	260a      	movs	r6, #10
 8003d68:	e9cd 3400 	strd	r3, r4, [sp]
 8003d6c:	466f      	mov	r7, sp
 8003d6e:	4630      	mov	r0, r6
 8003d70:	4639      	mov	r1, r7
 8003d72:	beab      	bkpt	0x00ab
 8003d74:	4606      	mov	r6, r0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7ff ffa8 	bl	8003ccc <checkerror>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dbe1      	blt.n	8003d44 <_swilseek+0x16>
 8003d80:	606c      	str	r4, [r5, #4]
 8003d82:	e7e1      	b.n	8003d48 <_swilseek+0x1a>
 8003d84:	2e02      	cmp	r6, #2
 8003d86:	d1ed      	bne.n	8003d64 <_swilseek+0x36>
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	260c      	movs	r6, #12
 8003d8e:	466f      	mov	r7, sp
 8003d90:	4630      	mov	r0, r6
 8003d92:	4639      	mov	r1, r7
 8003d94:	beab      	bkpt	0x00ab
 8003d96:	4606      	mov	r6, r0
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f7ff ff97 	bl	8003ccc <checkerror>
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	d0d0      	beq.n	8003d44 <_swilseek+0x16>
 8003da2:	4404      	add	r4, r0
 8003da4:	e7de      	b.n	8003d64 <_swilseek+0x36>

08003da6 <_lseek>:
 8003da6:	f7ff bfc2 	b.w	8003d2e <_swilseek>

08003daa <_swiwrite>:
 8003daa:	b530      	push	{r4, r5, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003db2:	9203      	str	r2, [sp, #12]
 8003db4:	2405      	movs	r4, #5
 8003db6:	ad01      	add	r5, sp, #4
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	beab      	bkpt	0x00ab
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7ff ff83 	bl	8003ccc <checkerror>
 8003dc6:	b005      	add	sp, #20
 8003dc8:	bd30      	pop	{r4, r5, pc}

08003dca <_write>:
 8003dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dcc:	4615      	mov	r5, r2
 8003dce:	9101      	str	r1, [sp, #4]
 8003dd0:	f7ff ff54 	bl	8003c7c <findslot>
 8003dd4:	9901      	ldr	r1, [sp, #4]
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	b930      	cbnz	r0, 8003de8 <_write+0x1e>
 8003dda:	f000 f9f3 	bl	80041c4 <__errno>
 8003dde:	2309      	movs	r3, #9
 8003de0:	6003      	str	r3, [r0, #0]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e012      	b.n	8003e0e <_write+0x44>
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	462a      	mov	r2, r5
 8003dec:	f7ff ffdd 	bl	8003daa <_swiwrite>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	dbf6      	blt.n	8003de2 <_write+0x18>
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	1a2b      	subs	r3, r5, r0
 8003df8:	441a      	add	r2, r3
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	6062      	str	r2, [r4, #4]
 8003dfe:	d105      	bne.n	8003e0c <_write+0x42>
 8003e00:	2000      	movs	r0, #0
 8003e02:	b003      	add	sp, #12
 8003e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e08:	f7ff bf52 	b.w	8003cb0 <error>
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	b003      	add	sp, #12
 8003e10:	bd30      	pop	{r4, r5, pc}

08003e12 <_swiclose>:
 8003e12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e14:	2402      	movs	r4, #2
 8003e16:	9001      	str	r0, [sp, #4]
 8003e18:	ad01      	add	r5, sp, #4
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	beab      	bkpt	0x00ab
 8003e20:	4604      	mov	r4, r0
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff ff52 	bl	8003ccc <checkerror>
 8003e28:	b003      	add	sp, #12
 8003e2a:	bd30      	pop	{r4, r5, pc}

08003e2c <_close>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f7ff ff24 	bl	8003c7c <findslot>
 8003e34:	4604      	mov	r4, r0
 8003e36:	b930      	cbnz	r0, 8003e46 <_close+0x1a>
 8003e38:	f000 f9c4 	bl	80041c4 <__errno>
 8003e3c:	2309      	movs	r3, #9
 8003e3e:	6003      	str	r3, [r0, #0]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
 8003e46:	3d01      	subs	r5, #1
 8003e48:	2d01      	cmp	r5, #1
 8003e4a:	d809      	bhi.n	8003e60 <_close+0x34>
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <_close+0x48>)
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d104      	bne.n	8003e60 <_close+0x34>
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	6003      	str	r3, [r0, #0]
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e7f1      	b.n	8003e44 <_close+0x18>
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	f7ff ffd6 	bl	8003e12 <_swiclose>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d1ec      	bne.n	8003e44 <_close+0x18>
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	e7e8      	b.n	8003e44 <_close+0x18>
 8003e72:	bf00      	nop
 8003e74:	20000a54 	.word	0x20000a54

08003e78 <_getpid>:
 8003e78:	2001      	movs	r0, #1
 8003e7a:	4770      	bx	lr

08003e7c <_swistat>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f7ff fefc 	bl	8003c7c <findslot>
 8003e84:	4605      	mov	r5, r0
 8003e86:	b930      	cbnz	r0, 8003e96 <_swistat+0x1a>
 8003e88:	f000 f99c 	bl	80041c4 <__errno>
 8003e8c:	2309      	movs	r3, #9
 8003e8e:	6003      	str	r3, [r0, #0]
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	6863      	ldr	r3, [r4, #4]
 8003e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	64a3      	str	r3, [r4, #72]	; 0x48
 8003ea4:	260c      	movs	r6, #12
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	beab      	bkpt	0x00ab
 8003eac:	4605      	mov	r5, r0
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f7ff ff0c 	bl	8003ccc <checkerror>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	bf1c      	itt	ne
 8003eb8:	6120      	strne	r0, [r4, #16]
 8003eba:	2000      	movne	r0, #0
 8003ebc:	e7ea      	b.n	8003e94 <_swistat+0x18>

08003ebe <_fstat>:
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	2258      	movs	r2, #88	; 0x58
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fab8 	bl	800443e <memset>
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed6:	f7ff bfd1 	b.w	8003e7c <_swistat>

08003eda <_stat>:
 8003eda:	b538      	push	{r3, r4, r5, lr}
 8003edc:	460d      	mov	r5, r1
 8003ede:	4604      	mov	r4, r0
 8003ee0:	2258      	movs	r2, #88	; 0x58
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 faaa 	bl	800443e <memset>
 8003eea:	4620      	mov	r0, r4
 8003eec:	2100      	movs	r1, #0
 8003eee:	f000 f811 	bl	8003f14 <_swiopen>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	d00b      	beq.n	8003f10 <_stat+0x36>
 8003ef8:	686b      	ldr	r3, [r5, #4]
 8003efa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003efe:	606b      	str	r3, [r5, #4]
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7ff ffbb 	bl	8003e7c <_swistat>
 8003f06:	4605      	mov	r5, r0
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff ff8f 	bl	8003e2c <_close>
 8003f0e:	462c      	mov	r4, r5
 8003f10:	4620      	mov	r0, r4
 8003f12:	bd38      	pop	{r3, r4, r5, pc}

08003f14 <_swiopen>:
 8003f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f18:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003fc4 <_swiopen+0xb0>
 8003f1c:	b097      	sub	sp, #92	; 0x5c
 8003f1e:	4607      	mov	r7, r0
 8003f20:	460e      	mov	r6, r1
 8003f22:	2500      	movs	r5, #0
 8003f24:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003f28:	1c61      	adds	r1, r4, #1
 8003f2a:	d037      	beq.n	8003f9c <_swiopen+0x88>
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	2d14      	cmp	r5, #20
 8003f30:	d1f8      	bne.n	8003f24 <_swiopen+0x10>
 8003f32:	f000 f947 	bl	80041c4 <__errno>
 8003f36:	2318      	movs	r3, #24
 8003f38:	6003      	str	r3, [r0, #0]
 8003f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3e:	e03d      	b.n	8003fbc <_swiopen+0xa8>
 8003f40:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003f44:	f240 6301 	movw	r3, #1537	; 0x601
 8003f48:	07b2      	lsls	r2, r6, #30
 8003f4a:	bf48      	it	mi
 8003f4c:	f044 0402 	orrmi.w	r4, r4, #2
 8003f50:	421e      	tst	r6, r3
 8003f52:	bf18      	it	ne
 8003f54:	f044 0404 	orrne.w	r4, r4, #4
 8003f58:	0733      	lsls	r3, r6, #28
 8003f5a:	bf48      	it	mi
 8003f5c:	f024 0404 	bicmi.w	r4, r4, #4
 8003f60:	4638      	mov	r0, r7
 8003f62:	bf48      	it	mi
 8003f64:	f044 0408 	orrmi.w	r4, r4, #8
 8003f68:	9700      	str	r7, [sp, #0]
 8003f6a:	f7fc f939 	bl	80001e0 <strlen>
 8003f6e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003f72:	2401      	movs	r4, #1
 8003f74:	4620      	mov	r0, r4
 8003f76:	4649      	mov	r1, r9
 8003f78:	beab      	bkpt	0x00ab
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	db08      	blt.n	8003f92 <_swiopen+0x7e>
 8003f80:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003f84:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f8e:	462c      	mov	r4, r5
 8003f90:	e014      	b.n	8003fbc <_swiopen+0xa8>
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7ff fe8c 	bl	8003cb0 <error>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	e00f      	b.n	8003fbc <_swiopen+0xa8>
 8003f9c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003fa0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fa4:	46e9      	mov	r9, sp
 8003fa6:	d1cb      	bne.n	8003f40 <_swiopen+0x2c>
 8003fa8:	4649      	mov	r1, r9
 8003faa:	4638      	mov	r0, r7
 8003fac:	f7ff ff95 	bl	8003eda <_stat>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d0c5      	beq.n	8003f40 <_swiopen+0x2c>
 8003fb4:	f000 f906 	bl	80041c4 <__errno>
 8003fb8:	2311      	movs	r3, #17
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	b017      	add	sp, #92	; 0x5c
 8003fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fc4:	20000a54 	.word	0x20000a54

08003fc8 <_get_semihosting_exts>:
 8003fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fcc:	4606      	mov	r6, r0
 8003fce:	460f      	mov	r7, r1
 8003fd0:	482a      	ldr	r0, [pc, #168]	; (800407c <_get_semihosting_exts+0xb4>)
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4615      	mov	r5, r2
 8003fd6:	f7ff ff9d 	bl	8003f14 <_swiopen>
 8003fda:	462a      	mov	r2, r5
 8003fdc:	4604      	mov	r4, r0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 fa2c 	bl	800443e <memset>
 8003fe6:	1c63      	adds	r3, r4, #1
 8003fe8:	d016      	beq.n	8004018 <_get_semihosting_exts+0x50>
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fe46 	bl	8003c7c <findslot>
 8003ff0:	f04f 090c 	mov.w	r9, #12
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	4648      	mov	r0, r9
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	beab      	bkpt	0x00ab
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4640      	mov	r0, r8
 8004000:	f7ff fe64 	bl	8003ccc <checkerror>
 8004004:	2803      	cmp	r0, #3
 8004006:	dd02      	ble.n	800400e <_get_semihosting_exts+0x46>
 8004008:	1ec3      	subs	r3, r0, #3
 800400a:	42ab      	cmp	r3, r5
 800400c:	dc08      	bgt.n	8004020 <_get_semihosting_exts+0x58>
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ff0c 	bl	8003e2c <_close>
 8004014:	f04f 34ff 	mov.w	r4, #4294967295
 8004018:	4620      	mov	r0, r4
 800401a:	b003      	add	sp, #12
 800401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004020:	2204      	movs	r2, #4
 8004022:	eb0d 0102 	add.w	r1, sp, r2
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff fe65 	bl	8003cf6 <_read>
 800402c:	2803      	cmp	r0, #3
 800402e:	ddee      	ble.n	800400e <_get_semihosting_exts+0x46>
 8004030:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004034:	2b53      	cmp	r3, #83	; 0x53
 8004036:	d1ea      	bne.n	800400e <_get_semihosting_exts+0x46>
 8004038:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800403c:	2b48      	cmp	r3, #72	; 0x48
 800403e:	d1e6      	bne.n	800400e <_get_semihosting_exts+0x46>
 8004040:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004044:	2b46      	cmp	r3, #70	; 0x46
 8004046:	d1e2      	bne.n	800400e <_get_semihosting_exts+0x46>
 8004048:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800404c:	2b42      	cmp	r3, #66	; 0x42
 800404e:	d1de      	bne.n	800400e <_get_semihosting_exts+0x46>
 8004050:	2201      	movs	r2, #1
 8004052:	4639      	mov	r1, r7
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff fe6a 	bl	8003d2e <_swilseek>
 800405a:	2800      	cmp	r0, #0
 800405c:	dbd7      	blt.n	800400e <_get_semihosting_exts+0x46>
 800405e:	462a      	mov	r2, r5
 8004060:	4631      	mov	r1, r6
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff fe47 	bl	8003cf6 <_read>
 8004068:	4605      	mov	r5, r0
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff fede 	bl	8003e2c <_close>
 8004070:	4628      	mov	r0, r5
 8004072:	f7ff fe2b 	bl	8003ccc <checkerror>
 8004076:	4604      	mov	r4, r0
 8004078:	e7ce      	b.n	8004018 <_get_semihosting_exts+0x50>
 800407a:	bf00      	nop
 800407c:	08007d80 	.word	0x08007d80

08004080 <initialise_semihosting_exts>:
 8004080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004082:	4d0a      	ldr	r5, [pc, #40]	; (80040ac <initialise_semihosting_exts+0x2c>)
 8004084:	4c0a      	ldr	r4, [pc, #40]	; (80040b0 <initialise_semihosting_exts+0x30>)
 8004086:	2100      	movs	r1, #0
 8004088:	2201      	movs	r2, #1
 800408a:	a801      	add	r0, sp, #4
 800408c:	6029      	str	r1, [r5, #0]
 800408e:	6022      	str	r2, [r4, #0]
 8004090:	f7ff ff9a 	bl	8003fc8 <_get_semihosting_exts>
 8004094:	2800      	cmp	r0, #0
 8004096:	dd07      	ble.n	80040a8 <initialise_semihosting_exts+0x28>
 8004098:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800409c:	f003 0201 	and.w	r2, r3, #1
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	602a      	str	r2, [r5, #0]
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	b003      	add	sp, #12
 80040aa:	bd30      	pop	{r4, r5, pc}
 80040ac:	200001b4 	.word	0x200001b4
 80040b0:	200001b8 	.word	0x200001b8

080040b4 <_has_ext_stdout_stderr>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	4c04      	ldr	r4, [pc, #16]	; (80040c8 <_has_ext_stdout_stderr+0x14>)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da01      	bge.n	80040c2 <_has_ext_stdout_stderr+0xe>
 80040be:	f7ff ffdf 	bl	8004080 <initialise_semihosting_exts>
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	bf00      	nop
 80040c8:	200001b8 	.word	0x200001b8

080040cc <initialise_monitor_handles>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004184 <initialise_monitor_handles+0xb8>
 80040d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80040da:	2303      	movs	r3, #3
 80040dc:	2400      	movs	r4, #0
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	af01      	add	r7, sp, #4
 80040e2:	9402      	str	r4, [sp, #8]
 80040e4:	2501      	movs	r5, #1
 80040e6:	4628      	mov	r0, r5
 80040e8:	4639      	mov	r1, r7
 80040ea:	beab      	bkpt	0x00ab
 80040ec:	4605      	mov	r5, r0
 80040ee:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004188 <initialise_monitor_handles+0xbc>
 80040f2:	4623      	mov	r3, r4
 80040f4:	4c20      	ldr	r4, [pc, #128]	; (8004178 <initialise_monitor_handles+0xac>)
 80040f6:	f8c8 5000 	str.w	r5, [r8]
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004102:	3301      	adds	r3, #1
 8004104:	2b14      	cmp	r3, #20
 8004106:	d1fa      	bne.n	80040fe <initialise_monitor_handles+0x32>
 8004108:	f7ff ffd4 	bl	80040b4 <_has_ext_stdout_stderr>
 800410c:	4d1b      	ldr	r5, [pc, #108]	; (800417c <initialise_monitor_handles+0xb0>)
 800410e:	b1d0      	cbz	r0, 8004146 <initialise_monitor_handles+0x7a>
 8004110:	f04f 0a03 	mov.w	sl, #3
 8004114:	2304      	movs	r3, #4
 8004116:	f8cd 9004 	str.w	r9, [sp, #4]
 800411a:	2601      	movs	r6, #1
 800411c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	4630      	mov	r0, r6
 8004124:	4639      	mov	r1, r7
 8004126:	beab      	bkpt	0x00ab
 8004128:	4683      	mov	fp, r0
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <initialise_monitor_handles+0xb4>)
 800412c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004130:	f8c3 b000 	str.w	fp, [r3]
 8004134:	2308      	movs	r3, #8
 8004136:	f8cd a00c 	str.w	sl, [sp, #12]
 800413a:	9302      	str	r3, [sp, #8]
 800413c:	4630      	mov	r0, r6
 800413e:	4639      	mov	r1, r7
 8004140:	beab      	bkpt	0x00ab
 8004142:	4606      	mov	r6, r0
 8004144:	602e      	str	r6, [r5, #0]
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	bf02      	ittt	eq
 800414c:	4b0c      	ldreq	r3, [pc, #48]	; (8004180 <initialise_monitor_handles+0xb4>)
 800414e:	681b      	ldreq	r3, [r3, #0]
 8004150:	602b      	streq	r3, [r5, #0]
 8004152:	2600      	movs	r6, #0
 8004154:	f8d8 3000 	ldr.w	r3, [r8]
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	6066      	str	r6, [r4, #4]
 800415c:	f7ff ffaa 	bl	80040b4 <_has_ext_stdout_stderr>
 8004160:	b130      	cbz	r0, 8004170 <initialise_monitor_handles+0xa4>
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <initialise_monitor_handles+0xb4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004170:	b005      	add	sp, #20
 8004172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	20000a54 	.word	0x20000a54
 800417c:	20000a48 	.word	0x20000a48
 8004180:	20000a50 	.word	0x20000a50
 8004184:	08007d96 	.word	0x08007d96
 8004188:	20000a4c 	.word	0x20000a4c

0800418c <_isatty>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	f7ff fd75 	bl	8003c7c <findslot>
 8004192:	2509      	movs	r5, #9
 8004194:	4604      	mov	r4, r0
 8004196:	b920      	cbnz	r0, 80041a2 <_isatty+0x16>
 8004198:	f000 f814 	bl	80041c4 <__errno>
 800419c:	6005      	str	r5, [r0, #0]
 800419e:	4620      	mov	r0, r4
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	4628      	mov	r0, r5
 80041a4:	4621      	mov	r1, r4
 80041a6:	beab      	bkpt	0x00ab
 80041a8:	4604      	mov	r4, r0
 80041aa:	2c01      	cmp	r4, #1
 80041ac:	d0f7      	beq.n	800419e <_isatty+0x12>
 80041ae:	f000 f809 	bl	80041c4 <__errno>
 80041b2:	2400      	movs	r4, #0
 80041b4:	4605      	mov	r5, r0
 80041b6:	2613      	movs	r6, #19
 80041b8:	4630      	mov	r0, r6
 80041ba:	4621      	mov	r1, r4
 80041bc:	beab      	bkpt	0x00ab
 80041be:	4606      	mov	r6, r0
 80041c0:	602e      	str	r6, [r5, #0]
 80041c2:	e7ec      	b.n	800419e <_isatty+0x12>

080041c4 <__errno>:
 80041c4:	4b01      	ldr	r3, [pc, #4]	; (80041cc <__errno+0x8>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	200001bc 	.word	0x200001bc

080041d0 <std>:
 80041d0:	2300      	movs	r3, #0
 80041d2:	b510      	push	{r4, lr}
 80041d4:	4604      	mov	r4, r0
 80041d6:	e9c0 3300 	strd	r3, r3, [r0]
 80041da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041de:	6083      	str	r3, [r0, #8]
 80041e0:	8181      	strh	r1, [r0, #12]
 80041e2:	6643      	str	r3, [r0, #100]	; 0x64
 80041e4:	81c2      	strh	r2, [r0, #14]
 80041e6:	6183      	str	r3, [r0, #24]
 80041e8:	4619      	mov	r1, r3
 80041ea:	2208      	movs	r2, #8
 80041ec:	305c      	adds	r0, #92	; 0x5c
 80041ee:	f000 f926 	bl	800443e <memset>
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <std+0x38>)
 80041f4:	6263      	str	r3, [r4, #36]	; 0x24
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <std+0x3c>)
 80041f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <std+0x40>)
 80041fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <std+0x44>)
 8004200:	6224      	str	r4, [r4, #32]
 8004202:	6323      	str	r3, [r4, #48]	; 0x30
 8004204:	bd10      	pop	{r4, pc}
 8004206:	bf00      	nop
 8004208:	08004701 	.word	0x08004701
 800420c:	08004723 	.word	0x08004723
 8004210:	0800475b 	.word	0x0800475b
 8004214:	0800477f 	.word	0x0800477f

08004218 <_cleanup_r>:
 8004218:	4901      	ldr	r1, [pc, #4]	; (8004220 <_cleanup_r+0x8>)
 800421a:	f000 b8af 	b.w	800437c <_fwalk_reent>
 800421e:	bf00      	nop
 8004220:	08004b19 	.word	0x08004b19

08004224 <__sfmoreglue>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	2268      	movs	r2, #104	; 0x68
 8004228:	1e4d      	subs	r5, r1, #1
 800422a:	4355      	muls	r5, r2
 800422c:	460e      	mov	r6, r1
 800422e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004232:	f000 f92d 	bl	8004490 <_malloc_r>
 8004236:	4604      	mov	r4, r0
 8004238:	b140      	cbz	r0, 800424c <__sfmoreglue+0x28>
 800423a:	2100      	movs	r1, #0
 800423c:	e9c0 1600 	strd	r1, r6, [r0]
 8004240:	300c      	adds	r0, #12
 8004242:	60a0      	str	r0, [r4, #8]
 8004244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004248:	f000 f8f9 	bl	800443e <memset>
 800424c:	4620      	mov	r0, r4
 800424e:	bd70      	pop	{r4, r5, r6, pc}

08004250 <__sfp_lock_acquire>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__sfp_lock_acquire+0x8>)
 8004252:	f000 b8f2 	b.w	800443a <__retarget_lock_acquire_recursive>
 8004256:	bf00      	nop
 8004258:	20000af5 	.word	0x20000af5

0800425c <__sfp_lock_release>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__sfp_lock_release+0x8>)
 800425e:	f000 b8ed 	b.w	800443c <__retarget_lock_release_recursive>
 8004262:	bf00      	nop
 8004264:	20000af5 	.word	0x20000af5

08004268 <__sinit_lock_acquire>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__sinit_lock_acquire+0x8>)
 800426a:	f000 b8e6 	b.w	800443a <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	20000af6 	.word	0x20000af6

08004274 <__sinit_lock_release>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__sinit_lock_release+0x8>)
 8004276:	f000 b8e1 	b.w	800443c <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	20000af6 	.word	0x20000af6

08004280 <__sinit>:
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	f7ff fff0 	bl	8004268 <__sinit_lock_acquire>
 8004288:	69a3      	ldr	r3, [r4, #24]
 800428a:	b11b      	cbz	r3, 8004294 <__sinit+0x14>
 800428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004290:	f7ff bff0 	b.w	8004274 <__sinit_lock_release>
 8004294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004298:	6523      	str	r3, [r4, #80]	; 0x50
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <__sinit+0x68>)
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <__sinit+0x6c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	bf04      	itt	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	61a3      	streq	r3, [r4, #24]
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 f820 	bl	80042f0 <__sfp>
 80042b0:	6060      	str	r0, [r4, #4]
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 f81c 	bl	80042f0 <__sfp>
 80042b8:	60a0      	str	r0, [r4, #8]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 f818 	bl	80042f0 <__sfp>
 80042c0:	2200      	movs	r2, #0
 80042c2:	60e0      	str	r0, [r4, #12]
 80042c4:	2104      	movs	r1, #4
 80042c6:	6860      	ldr	r0, [r4, #4]
 80042c8:	f7ff ff82 	bl	80041d0 <std>
 80042cc:	68a0      	ldr	r0, [r4, #8]
 80042ce:	2201      	movs	r2, #1
 80042d0:	2109      	movs	r1, #9
 80042d2:	f7ff ff7d 	bl	80041d0 <std>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	2112      	movs	r1, #18
 80042dc:	f7ff ff78 	bl	80041d0 <std>
 80042e0:	2301      	movs	r3, #1
 80042e2:	61a3      	str	r3, [r4, #24]
 80042e4:	e7d2      	b.n	800428c <__sinit+0xc>
 80042e6:	bf00      	nop
 80042e8:	08007dfc 	.word	0x08007dfc
 80042ec:	08004219 	.word	0x08004219

080042f0 <__sfp>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	4607      	mov	r7, r0
 80042f4:	f7ff ffac 	bl	8004250 <__sfp_lock_acquire>
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <__sfp+0x84>)
 80042fa:	681e      	ldr	r6, [r3, #0]
 80042fc:	69b3      	ldr	r3, [r6, #24]
 80042fe:	b913      	cbnz	r3, 8004306 <__sfp+0x16>
 8004300:	4630      	mov	r0, r6
 8004302:	f7ff ffbd 	bl	8004280 <__sinit>
 8004306:	3648      	adds	r6, #72	; 0x48
 8004308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800430c:	3b01      	subs	r3, #1
 800430e:	d503      	bpl.n	8004318 <__sfp+0x28>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	b30b      	cbz	r3, 8004358 <__sfp+0x68>
 8004314:	6836      	ldr	r6, [r6, #0]
 8004316:	e7f7      	b.n	8004308 <__sfp+0x18>
 8004318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800431c:	b9d5      	cbnz	r5, 8004354 <__sfp+0x64>
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <__sfp+0x88>)
 8004320:	60e3      	str	r3, [r4, #12]
 8004322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004326:	6665      	str	r5, [r4, #100]	; 0x64
 8004328:	f000 f886 	bl	8004438 <__retarget_lock_init_recursive>
 800432c:	f7ff ff96 	bl	800425c <__sfp_lock_release>
 8004330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004338:	6025      	str	r5, [r4, #0]
 800433a:	61a5      	str	r5, [r4, #24]
 800433c:	2208      	movs	r2, #8
 800433e:	4629      	mov	r1, r5
 8004340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004344:	f000 f87b 	bl	800443e <memset>
 8004348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800434c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004350:	4620      	mov	r0, r4
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004354:	3468      	adds	r4, #104	; 0x68
 8004356:	e7d9      	b.n	800430c <__sfp+0x1c>
 8004358:	2104      	movs	r1, #4
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ff62 	bl	8004224 <__sfmoreglue>
 8004360:	4604      	mov	r4, r0
 8004362:	6030      	str	r0, [r6, #0]
 8004364:	2800      	cmp	r0, #0
 8004366:	d1d5      	bne.n	8004314 <__sfp+0x24>
 8004368:	f7ff ff78 	bl	800425c <__sfp_lock_release>
 800436c:	230c      	movs	r3, #12
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	e7ee      	b.n	8004350 <__sfp+0x60>
 8004372:	bf00      	nop
 8004374:	08007dfc 	.word	0x08007dfc
 8004378:	ffff0001 	.word	0xffff0001

0800437c <_fwalk_reent>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	4606      	mov	r6, r0
 8004382:	4688      	mov	r8, r1
 8004384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004388:	2700      	movs	r7, #0
 800438a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800438e:	f1b9 0901 	subs.w	r9, r9, #1
 8004392:	d505      	bpl.n	80043a0 <_fwalk_reent+0x24>
 8004394:	6824      	ldr	r4, [r4, #0]
 8004396:	2c00      	cmp	r4, #0
 8004398:	d1f7      	bne.n	800438a <_fwalk_reent+0xe>
 800439a:	4638      	mov	r0, r7
 800439c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a0:	89ab      	ldrh	r3, [r5, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d907      	bls.n	80043b6 <_fwalk_reent+0x3a>
 80043a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043aa:	3301      	adds	r3, #1
 80043ac:	d003      	beq.n	80043b6 <_fwalk_reent+0x3a>
 80043ae:	4629      	mov	r1, r5
 80043b0:	4630      	mov	r0, r6
 80043b2:	47c0      	blx	r8
 80043b4:	4307      	orrs	r7, r0
 80043b6:	3568      	adds	r5, #104	; 0x68
 80043b8:	e7e9      	b.n	800438e <_fwalk_reent+0x12>
	...

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4d0d      	ldr	r5, [pc, #52]	; (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2600      	movs	r6, #0
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4d0b      	ldr	r5, [pc, #44]	; (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	; (8004400 <__libc_init_array+0x44>)
 80043d0:	f001 f840 	bl	8005454 <_init>
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2600      	movs	r6, #0
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08007f10 	.word	0x08007f10
 80043f8:	08007f10 	.word	0x08007f10
 80043fc:	08007f10 	.word	0x08007f10
 8004400:	08007f14 	.word	0x08007f14

08004404 <__itoa>:
 8004404:	1e93      	subs	r3, r2, #2
 8004406:	2b22      	cmp	r3, #34	; 0x22
 8004408:	b510      	push	{r4, lr}
 800440a:	460c      	mov	r4, r1
 800440c:	d904      	bls.n	8004418 <__itoa+0x14>
 800440e:	2300      	movs	r3, #0
 8004410:	700b      	strb	r3, [r1, #0]
 8004412:	461c      	mov	r4, r3
 8004414:	4620      	mov	r0, r4
 8004416:	bd10      	pop	{r4, pc}
 8004418:	2a0a      	cmp	r2, #10
 800441a:	d109      	bne.n	8004430 <__itoa+0x2c>
 800441c:	2800      	cmp	r0, #0
 800441e:	da07      	bge.n	8004430 <__itoa+0x2c>
 8004420:	232d      	movs	r3, #45	; 0x2d
 8004422:	700b      	strb	r3, [r1, #0]
 8004424:	4240      	negs	r0, r0
 8004426:	2101      	movs	r1, #1
 8004428:	4421      	add	r1, r4
 800442a:	f000 f9ad 	bl	8004788 <__utoa>
 800442e:	e7f1      	b.n	8004414 <__itoa+0x10>
 8004430:	2100      	movs	r1, #0
 8004432:	e7f9      	b.n	8004428 <__itoa+0x24>

08004434 <itoa>:
 8004434:	f7ff bfe6 	b.w	8004404 <__itoa>

08004438 <__retarget_lock_init_recursive>:
 8004438:	4770      	bx	lr

0800443a <__retarget_lock_acquire_recursive>:
 800443a:	4770      	bx	lr

0800443c <__retarget_lock_release_recursive>:
 800443c:	4770      	bx	lr

0800443e <memset>:
 800443e:	4402      	add	r2, r0
 8004440:	4603      	mov	r3, r0
 8004442:	4293      	cmp	r3, r2
 8004444:	d100      	bne.n	8004448 <memset+0xa>
 8004446:	4770      	bx	lr
 8004448:	f803 1b01 	strb.w	r1, [r3], #1
 800444c:	e7f9      	b.n	8004442 <memset+0x4>
	...

08004450 <sbrk_aligned>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4e0e      	ldr	r6, [pc, #56]	; (800448c <sbrk_aligned+0x3c>)
 8004454:	460c      	mov	r4, r1
 8004456:	6831      	ldr	r1, [r6, #0]
 8004458:	4605      	mov	r5, r0
 800445a:	b911      	cbnz	r1, 8004462 <sbrk_aligned+0x12>
 800445c:	f000 f940 	bl	80046e0 <_sbrk_r>
 8004460:	6030      	str	r0, [r6, #0]
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f93b 	bl	80046e0 <_sbrk_r>
 800446a:	1c43      	adds	r3, r0, #1
 800446c:	d00a      	beq.n	8004484 <sbrk_aligned+0x34>
 800446e:	1cc4      	adds	r4, r0, #3
 8004470:	f024 0403 	bic.w	r4, r4, #3
 8004474:	42a0      	cmp	r0, r4
 8004476:	d007      	beq.n	8004488 <sbrk_aligned+0x38>
 8004478:	1a21      	subs	r1, r4, r0
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f930 	bl	80046e0 <_sbrk_r>
 8004480:	3001      	adds	r0, #1
 8004482:	d101      	bne.n	8004488 <sbrk_aligned+0x38>
 8004484:	f04f 34ff 	mov.w	r4, #4294967295
 8004488:	4620      	mov	r0, r4
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	20000afc 	.word	0x20000afc

08004490 <_malloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	1ccd      	adds	r5, r1, #3
 8004496:	f025 0503 	bic.w	r5, r5, #3
 800449a:	3508      	adds	r5, #8
 800449c:	2d0c      	cmp	r5, #12
 800449e:	bf38      	it	cc
 80044a0:	250c      	movcc	r5, #12
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	4607      	mov	r7, r0
 80044a6:	db01      	blt.n	80044ac <_malloc_r+0x1c>
 80044a8:	42a9      	cmp	r1, r5
 80044aa:	d905      	bls.n	80044b8 <_malloc_r+0x28>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	2600      	movs	r6, #0
 80044b2:	4630      	mov	r0, r6
 80044b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b8:	4e2e      	ldr	r6, [pc, #184]	; (8004574 <_malloc_r+0xe4>)
 80044ba:	f000 fbfb 	bl	8004cb4 <__malloc_lock>
 80044be:	6833      	ldr	r3, [r6, #0]
 80044c0:	461c      	mov	r4, r3
 80044c2:	bb34      	cbnz	r4, 8004512 <_malloc_r+0x82>
 80044c4:	4629      	mov	r1, r5
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7ff ffc2 	bl	8004450 <sbrk_aligned>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	4604      	mov	r4, r0
 80044d0:	d14d      	bne.n	800456e <_malloc_r+0xde>
 80044d2:	6834      	ldr	r4, [r6, #0]
 80044d4:	4626      	mov	r6, r4
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	d140      	bne.n	800455c <_malloc_r+0xcc>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	4631      	mov	r1, r6
 80044de:	4638      	mov	r0, r7
 80044e0:	eb04 0803 	add.w	r8, r4, r3
 80044e4:	f000 f8fc 	bl	80046e0 <_sbrk_r>
 80044e8:	4580      	cmp	r8, r0
 80044ea:	d13a      	bne.n	8004562 <_malloc_r+0xd2>
 80044ec:	6821      	ldr	r1, [r4, #0]
 80044ee:	3503      	adds	r5, #3
 80044f0:	1a6d      	subs	r5, r5, r1
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	4629      	mov	r1, r5
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ffa5 	bl	8004450 <sbrk_aligned>
 8004506:	3001      	adds	r0, #1
 8004508:	d02b      	beq.n	8004562 <_malloc_r+0xd2>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	442b      	add	r3, r5
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	e00e      	b.n	8004530 <_malloc_r+0xa0>
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	1b52      	subs	r2, r2, r5
 8004516:	d41e      	bmi.n	8004556 <_malloc_r+0xc6>
 8004518:	2a0b      	cmp	r2, #11
 800451a:	d916      	bls.n	800454a <_malloc_r+0xba>
 800451c:	1961      	adds	r1, r4, r5
 800451e:	42a3      	cmp	r3, r4
 8004520:	6025      	str	r5, [r4, #0]
 8004522:	bf18      	it	ne
 8004524:	6059      	strne	r1, [r3, #4]
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	bf08      	it	eq
 800452a:	6031      	streq	r1, [r6, #0]
 800452c:	5162      	str	r2, [r4, r5]
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	4638      	mov	r0, r7
 8004532:	f104 060b 	add.w	r6, r4, #11
 8004536:	f000 fbc3 	bl	8004cc0 <__malloc_unlock>
 800453a:	f026 0607 	bic.w	r6, r6, #7
 800453e:	1d23      	adds	r3, r4, #4
 8004540:	1af2      	subs	r2, r6, r3
 8004542:	d0b6      	beq.n	80044b2 <_malloc_r+0x22>
 8004544:	1b9b      	subs	r3, r3, r6
 8004546:	50a3      	str	r3, [r4, r2]
 8004548:	e7b3      	b.n	80044b2 <_malloc_r+0x22>
 800454a:	6862      	ldr	r2, [r4, #4]
 800454c:	42a3      	cmp	r3, r4
 800454e:	bf0c      	ite	eq
 8004550:	6032      	streq	r2, [r6, #0]
 8004552:	605a      	strne	r2, [r3, #4]
 8004554:	e7ec      	b.n	8004530 <_malloc_r+0xa0>
 8004556:	4623      	mov	r3, r4
 8004558:	6864      	ldr	r4, [r4, #4]
 800455a:	e7b2      	b.n	80044c2 <_malloc_r+0x32>
 800455c:	4634      	mov	r4, r6
 800455e:	6876      	ldr	r6, [r6, #4]
 8004560:	e7b9      	b.n	80044d6 <_malloc_r+0x46>
 8004562:	230c      	movs	r3, #12
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4638      	mov	r0, r7
 8004568:	f000 fbaa 	bl	8004cc0 <__malloc_unlock>
 800456c:	e7a1      	b.n	80044b2 <_malloc_r+0x22>
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	e7de      	b.n	8004530 <_malloc_r+0xa0>
 8004572:	bf00      	nop
 8004574:	20000af8 	.word	0x20000af8

08004578 <_puts_r>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	460e      	mov	r6, r1
 800457c:	4605      	mov	r5, r0
 800457e:	b118      	cbz	r0, 8004588 <_puts_r+0x10>
 8004580:	6983      	ldr	r3, [r0, #24]
 8004582:	b90b      	cbnz	r3, 8004588 <_puts_r+0x10>
 8004584:	f7ff fe7c 	bl	8004280 <__sinit>
 8004588:	69ab      	ldr	r3, [r5, #24]
 800458a:	68ac      	ldr	r4, [r5, #8]
 800458c:	b913      	cbnz	r3, 8004594 <_puts_r+0x1c>
 800458e:	4628      	mov	r0, r5
 8004590:	f7ff fe76 	bl	8004280 <__sinit>
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <_puts_r+0xd0>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d120      	bne.n	80045dc <_puts_r+0x64>
 800459a:	686c      	ldr	r4, [r5, #4]
 800459c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800459e:	07db      	lsls	r3, r3, #31
 80045a0:	d405      	bmi.n	80045ae <_puts_r+0x36>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	0598      	lsls	r0, r3, #22
 80045a6:	d402      	bmi.n	80045ae <_puts_r+0x36>
 80045a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045aa:	f7ff ff46 	bl	800443a <__retarget_lock_acquire_recursive>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	0719      	lsls	r1, r3, #28
 80045b2:	d51d      	bpl.n	80045f0 <_puts_r+0x78>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	b1db      	cbz	r3, 80045f0 <_puts_r+0x78>
 80045b8:	3e01      	subs	r6, #1
 80045ba:	68a3      	ldr	r3, [r4, #8]
 80045bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045c0:	3b01      	subs	r3, #1
 80045c2:	60a3      	str	r3, [r4, #8]
 80045c4:	bb39      	cbnz	r1, 8004616 <_puts_r+0x9e>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da38      	bge.n	800463c <_puts_r+0xc4>
 80045ca:	4622      	mov	r2, r4
 80045cc:	210a      	movs	r1, #10
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 f91c 	bl	800480c <__swbuf_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d011      	beq.n	80045fc <_puts_r+0x84>
 80045d8:	250a      	movs	r5, #10
 80045da:	e011      	b.n	8004600 <_puts_r+0x88>
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <_puts_r+0xd4>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d101      	bne.n	80045e6 <_puts_r+0x6e>
 80045e2:	68ac      	ldr	r4, [r5, #8]
 80045e4:	e7da      	b.n	800459c <_puts_r+0x24>
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <_puts_r+0xd8>)
 80045e8:	429c      	cmp	r4, r3
 80045ea:	bf08      	it	eq
 80045ec:	68ec      	ldreq	r4, [r5, #12]
 80045ee:	e7d5      	b.n	800459c <_puts_r+0x24>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 f96e 	bl	80048d4 <__swsetup_r>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d0dd      	beq.n	80045b8 <_puts_r+0x40>
 80045fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004602:	07da      	lsls	r2, r3, #31
 8004604:	d405      	bmi.n	8004612 <_puts_r+0x9a>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	059b      	lsls	r3, r3, #22
 800460a:	d402      	bmi.n	8004612 <_puts_r+0x9a>
 800460c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800460e:	f7ff ff15 	bl	800443c <__retarget_lock_release_recursive>
 8004612:	4628      	mov	r0, r5
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	2b00      	cmp	r3, #0
 8004618:	da04      	bge.n	8004624 <_puts_r+0xac>
 800461a:	69a2      	ldr	r2, [r4, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	dc06      	bgt.n	800462e <_puts_r+0xb6>
 8004620:	290a      	cmp	r1, #10
 8004622:	d004      	beq.n	800462e <_puts_r+0xb6>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	6022      	str	r2, [r4, #0]
 800462a:	7019      	strb	r1, [r3, #0]
 800462c:	e7c5      	b.n	80045ba <_puts_r+0x42>
 800462e:	4622      	mov	r2, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 f8eb 	bl	800480c <__swbuf_r>
 8004636:	3001      	adds	r0, #1
 8004638:	d1bf      	bne.n	80045ba <_puts_r+0x42>
 800463a:	e7df      	b.n	80045fc <_puts_r+0x84>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	250a      	movs	r5, #10
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	6022      	str	r2, [r4, #0]
 8004644:	701d      	strb	r5, [r3, #0]
 8004646:	e7db      	b.n	8004600 <_puts_r+0x88>
 8004648:	08007dbc 	.word	0x08007dbc
 800464c:	08007ddc 	.word	0x08007ddc
 8004650:	08007d9c 	.word	0x08007d9c

08004654 <puts>:
 8004654:	4b02      	ldr	r3, [pc, #8]	; (8004660 <puts+0xc>)
 8004656:	4601      	mov	r1, r0
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	f7ff bf8d 	b.w	8004578 <_puts_r>
 800465e:	bf00      	nop
 8004660:	200001bc 	.word	0x200001bc

08004664 <rand>:
 8004664:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <rand+0x5c>)
 8004666:	b510      	push	{r4, lr}
 8004668:	681c      	ldr	r4, [r3, #0]
 800466a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800466c:	b9b3      	cbnz	r3, 800469c <rand+0x38>
 800466e:	2018      	movs	r0, #24
 8004670:	f000 fb18 	bl	8004ca4 <malloc>
 8004674:	63a0      	str	r0, [r4, #56]	; 0x38
 8004676:	b928      	cbnz	r0, 8004684 <rand+0x20>
 8004678:	4602      	mov	r2, r0
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <rand+0x60>)
 800467c:	4812      	ldr	r0, [pc, #72]	; (80046c8 <rand+0x64>)
 800467e:	214e      	movs	r1, #78	; 0x4e
 8004680:	f000 f996 	bl	80049b0 <__assert_func>
 8004684:	4a11      	ldr	r2, [pc, #68]	; (80046cc <rand+0x68>)
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <rand+0x6c>)
 8004688:	e9c0 2300 	strd	r2, r3, [r0]
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <rand+0x70>)
 800468e:	6083      	str	r3, [r0, #8]
 8004690:	230b      	movs	r3, #11
 8004692:	8183      	strh	r3, [r0, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	2300      	movs	r3, #0
 8004698:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800469c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <rand+0x74>)
 80046a0:	6920      	ldr	r0, [r4, #16]
 80046a2:	6963      	ldr	r3, [r4, #20]
 80046a4:	490d      	ldr	r1, [pc, #52]	; (80046dc <rand+0x78>)
 80046a6:	4342      	muls	r2, r0
 80046a8:	fb01 2203 	mla	r2, r1, r3, r2
 80046ac:	fba0 0101 	umull	r0, r1, r0, r1
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	eb42 0001 	adc.w	r0, r2, r1
 80046b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80046ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	200001bc 	.word	0x200001bc
 80046c4:	08007e00 	.word	0x08007e00
 80046c8:	08007e17 	.word	0x08007e17
 80046cc:	abcd330e 	.word	0xabcd330e
 80046d0:	e66d1234 	.word	0xe66d1234
 80046d4:	0005deec 	.word	0x0005deec
 80046d8:	5851f42d 	.word	0x5851f42d
 80046dc:	4c957f2d 	.word	0x4c957f2d

080046e0 <_sbrk_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d06      	ldr	r5, [pc, #24]	; (80046fc <_sbrk_r+0x1c>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fd fa68 	bl	8001bc0 <_sbrk>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_sbrk_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_sbrk_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000b00 	.word	0x20000b00

08004700 <__sread>:
 8004700:	b510      	push	{r4, lr}
 8004702:	460c      	mov	r4, r1
 8004704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004708:	f000 fe1a 	bl	8005340 <_read_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	bfab      	itete	ge
 8004710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004712:	89a3      	ldrhlt	r3, [r4, #12]
 8004714:	181b      	addge	r3, r3, r0
 8004716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800471a:	bfac      	ite	ge
 800471c:	6563      	strge	r3, [r4, #84]	; 0x54
 800471e:	81a3      	strhlt	r3, [r4, #12]
 8004720:	bd10      	pop	{r4, pc}

08004722 <__swrite>:
 8004722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	461f      	mov	r7, r3
 8004728:	898b      	ldrh	r3, [r1, #12]
 800472a:	05db      	lsls	r3, r3, #23
 800472c:	4605      	mov	r5, r0
 800472e:	460c      	mov	r4, r1
 8004730:	4616      	mov	r6, r2
 8004732:	d505      	bpl.n	8004740 <__swrite+0x1e>
 8004734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004738:	2302      	movs	r3, #2
 800473a:	2200      	movs	r2, #0
 800473c:	f000 fa3a 	bl	8004bb4 <_lseek_r>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	4632      	mov	r2, r6
 800474e:	463b      	mov	r3, r7
 8004750:	4628      	mov	r0, r5
 8004752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004756:	f000 b8ab 	b.w	80048b0 <_write_r>

0800475a <__sseek>:
 800475a:	b510      	push	{r4, lr}
 800475c:	460c      	mov	r4, r1
 800475e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004762:	f000 fa27 	bl	8004bb4 <_lseek_r>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	bf15      	itete	ne
 800476c:	6560      	strne	r0, [r4, #84]	; 0x54
 800476e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004776:	81a3      	strheq	r3, [r4, #12]
 8004778:	bf18      	it	ne
 800477a:	81a3      	strhne	r3, [r4, #12]
 800477c:	bd10      	pop	{r4, pc}

0800477e <__sclose>:
 800477e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004782:	f000 b933 	b.w	80049ec <_close_r>
	...

08004788 <__utoa>:
 8004788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478a:	4c1f      	ldr	r4, [pc, #124]	; (8004808 <__utoa+0x80>)
 800478c:	b08b      	sub	sp, #44	; 0x2c
 800478e:	4605      	mov	r5, r0
 8004790:	460b      	mov	r3, r1
 8004792:	466e      	mov	r6, sp
 8004794:	f104 0c20 	add.w	ip, r4, #32
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	6861      	ldr	r1, [r4, #4]
 800479c:	4637      	mov	r7, r6
 800479e:	c703      	stmia	r7!, {r0, r1}
 80047a0:	3408      	adds	r4, #8
 80047a2:	4564      	cmp	r4, ip
 80047a4:	463e      	mov	r6, r7
 80047a6:	d1f7      	bne.n	8004798 <__utoa+0x10>
 80047a8:	7921      	ldrb	r1, [r4, #4]
 80047aa:	7139      	strb	r1, [r7, #4]
 80047ac:	1e91      	subs	r1, r2, #2
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	6038      	str	r0, [r7, #0]
 80047b2:	2922      	cmp	r1, #34	; 0x22
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	d904      	bls.n	80047c4 <__utoa+0x3c>
 80047ba:	7019      	strb	r1, [r3, #0]
 80047bc:	460b      	mov	r3, r1
 80047be:	4618      	mov	r0, r3
 80047c0:	b00b      	add	sp, #44	; 0x2c
 80047c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c4:	1e58      	subs	r0, r3, #1
 80047c6:	4684      	mov	ip, r0
 80047c8:	fbb5 f7f2 	udiv	r7, r5, r2
 80047cc:	fb02 5617 	mls	r6, r2, r7, r5
 80047d0:	3628      	adds	r6, #40	; 0x28
 80047d2:	446e      	add	r6, sp
 80047d4:	460c      	mov	r4, r1
 80047d6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80047da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80047de:	462e      	mov	r6, r5
 80047e0:	42b2      	cmp	r2, r6
 80047e2:	f101 0101 	add.w	r1, r1, #1
 80047e6:	463d      	mov	r5, r7
 80047e8:	d9ee      	bls.n	80047c8 <__utoa+0x40>
 80047ea:	2200      	movs	r2, #0
 80047ec:	545a      	strb	r2, [r3, r1]
 80047ee:	1919      	adds	r1, r3, r4
 80047f0:	1aa5      	subs	r5, r4, r2
 80047f2:	42aa      	cmp	r2, r5
 80047f4:	dae3      	bge.n	80047be <__utoa+0x36>
 80047f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047fa:	780e      	ldrb	r6, [r1, #0]
 80047fc:	7006      	strb	r6, [r0, #0]
 80047fe:	3201      	adds	r2, #1
 8004800:	f801 5901 	strb.w	r5, [r1], #-1
 8004804:	e7f4      	b.n	80047f0 <__utoa+0x68>
 8004806:	bf00      	nop
 8004808:	08007e72 	.word	0x08007e72

0800480c <__swbuf_r>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	460e      	mov	r6, r1
 8004810:	4614      	mov	r4, r2
 8004812:	4605      	mov	r5, r0
 8004814:	b118      	cbz	r0, 800481e <__swbuf_r+0x12>
 8004816:	6983      	ldr	r3, [r0, #24]
 8004818:	b90b      	cbnz	r3, 800481e <__swbuf_r+0x12>
 800481a:	f7ff fd31 	bl	8004280 <__sinit>
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <__swbuf_r+0x98>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d12b      	bne.n	800487c <__swbuf_r+0x70>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	69a3      	ldr	r3, [r4, #24]
 8004828:	60a3      	str	r3, [r4, #8]
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	071a      	lsls	r2, r3, #28
 800482e:	d52f      	bpl.n	8004890 <__swbuf_r+0x84>
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	b36b      	cbz	r3, 8004890 <__swbuf_r+0x84>
 8004834:	6923      	ldr	r3, [r4, #16]
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	1ac0      	subs	r0, r0, r3
 800483a:	6963      	ldr	r3, [r4, #20]
 800483c:	b2f6      	uxtb	r6, r6
 800483e:	4283      	cmp	r3, r0
 8004840:	4637      	mov	r7, r6
 8004842:	dc04      	bgt.n	800484e <__swbuf_r+0x42>
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f966 	bl	8004b18 <_fflush_r>
 800484c:	bb30      	cbnz	r0, 800489c <__swbuf_r+0x90>
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	3b01      	subs	r3, #1
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	701e      	strb	r6, [r3, #0]
 800485c:	6963      	ldr	r3, [r4, #20]
 800485e:	3001      	adds	r0, #1
 8004860:	4283      	cmp	r3, r0
 8004862:	d004      	beq.n	800486e <__swbuf_r+0x62>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	07db      	lsls	r3, r3, #31
 8004868:	d506      	bpl.n	8004878 <__swbuf_r+0x6c>
 800486a:	2e0a      	cmp	r6, #10
 800486c:	d104      	bne.n	8004878 <__swbuf_r+0x6c>
 800486e:	4621      	mov	r1, r4
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f951 	bl	8004b18 <_fflush_r>
 8004876:	b988      	cbnz	r0, 800489c <__swbuf_r+0x90>
 8004878:	4638      	mov	r0, r7
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <__swbuf_r+0x9c>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d101      	bne.n	8004886 <__swbuf_r+0x7a>
 8004882:	68ac      	ldr	r4, [r5, #8]
 8004884:	e7cf      	b.n	8004826 <__swbuf_r+0x1a>
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <__swbuf_r+0xa0>)
 8004888:	429c      	cmp	r4, r3
 800488a:	bf08      	it	eq
 800488c:	68ec      	ldreq	r4, [r5, #12]
 800488e:	e7ca      	b.n	8004826 <__swbuf_r+0x1a>
 8004890:	4621      	mov	r1, r4
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f81e 	bl	80048d4 <__swsetup_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	d0cb      	beq.n	8004834 <__swbuf_r+0x28>
 800489c:	f04f 37ff 	mov.w	r7, #4294967295
 80048a0:	e7ea      	b.n	8004878 <__swbuf_r+0x6c>
 80048a2:	bf00      	nop
 80048a4:	08007dbc 	.word	0x08007dbc
 80048a8:	08007ddc 	.word	0x08007ddc
 80048ac:	08007d9c 	.word	0x08007d9c

080048b0 <_write_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d07      	ldr	r5, [pc, #28]	; (80048d0 <_write_r+0x20>)
 80048b4:	4604      	mov	r4, r0
 80048b6:	4608      	mov	r0, r1
 80048b8:	4611      	mov	r1, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7ff fa83 	bl	8003dca <_write>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_write_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_write_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	20000b00 	.word	0x20000b00

080048d4 <__swsetup_r>:
 80048d4:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <__swsetup_r+0xcc>)
 80048d6:	b570      	push	{r4, r5, r6, lr}
 80048d8:	681d      	ldr	r5, [r3, #0]
 80048da:	4606      	mov	r6, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	b125      	cbz	r5, 80048ea <__swsetup_r+0x16>
 80048e0:	69ab      	ldr	r3, [r5, #24]
 80048e2:	b913      	cbnz	r3, 80048ea <__swsetup_r+0x16>
 80048e4:	4628      	mov	r0, r5
 80048e6:	f7ff fccb 	bl	8004280 <__sinit>
 80048ea:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <__swsetup_r+0xd0>)
 80048ec:	429c      	cmp	r4, r3
 80048ee:	d10f      	bne.n	8004910 <__swsetup_r+0x3c>
 80048f0:	686c      	ldr	r4, [r5, #4]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048f8:	0719      	lsls	r1, r3, #28
 80048fa:	d42c      	bmi.n	8004956 <__swsetup_r+0x82>
 80048fc:	06dd      	lsls	r5, r3, #27
 80048fe:	d411      	bmi.n	8004924 <__swsetup_r+0x50>
 8004900:	2309      	movs	r3, #9
 8004902:	6033      	str	r3, [r6, #0]
 8004904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	e03e      	b.n	800498e <__swsetup_r+0xba>
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <__swsetup_r+0xd4>)
 8004912:	429c      	cmp	r4, r3
 8004914:	d101      	bne.n	800491a <__swsetup_r+0x46>
 8004916:	68ac      	ldr	r4, [r5, #8]
 8004918:	e7eb      	b.n	80048f2 <__swsetup_r+0x1e>
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <__swsetup_r+0xd8>)
 800491c:	429c      	cmp	r4, r3
 800491e:	bf08      	it	eq
 8004920:	68ec      	ldreq	r4, [r5, #12]
 8004922:	e7e6      	b.n	80048f2 <__swsetup_r+0x1e>
 8004924:	0758      	lsls	r0, r3, #29
 8004926:	d512      	bpl.n	800494e <__swsetup_r+0x7a>
 8004928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492a:	b141      	cbz	r1, 800493e <__swsetup_r+0x6a>
 800492c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004930:	4299      	cmp	r1, r3
 8004932:	d002      	beq.n	800493a <__swsetup_r+0x66>
 8004934:	4630      	mov	r0, r6
 8004936:	f000 f9c9 	bl	8004ccc <_free_r>
 800493a:	2300      	movs	r3, #0
 800493c:	6363      	str	r3, [r4, #52]	; 0x34
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0308 	orr.w	r3, r3, #8
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	b94b      	cbnz	r3, 800496e <__swsetup_r+0x9a>
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d003      	beq.n	800496e <__swsetup_r+0x9a>
 8004966:	4621      	mov	r1, r4
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f95b 	bl	8004c24 <__smakebuf_r>
 800496e:	89a0      	ldrh	r0, [r4, #12]
 8004970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004974:	f010 0301 	ands.w	r3, r0, #1
 8004978:	d00a      	beq.n	8004990 <__swsetup_r+0xbc>
 800497a:	2300      	movs	r3, #0
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	6963      	ldr	r3, [r4, #20]
 8004980:	425b      	negs	r3, r3
 8004982:	61a3      	str	r3, [r4, #24]
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	b943      	cbnz	r3, 800499a <__swsetup_r+0xc6>
 8004988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800498c:	d1ba      	bne.n	8004904 <__swsetup_r+0x30>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	0781      	lsls	r1, r0, #30
 8004992:	bf58      	it	pl
 8004994:	6963      	ldrpl	r3, [r4, #20]
 8004996:	60a3      	str	r3, [r4, #8]
 8004998:	e7f4      	b.n	8004984 <__swsetup_r+0xb0>
 800499a:	2000      	movs	r0, #0
 800499c:	e7f7      	b.n	800498e <__swsetup_r+0xba>
 800499e:	bf00      	nop
 80049a0:	200001bc 	.word	0x200001bc
 80049a4:	08007dbc 	.word	0x08007dbc
 80049a8:	08007ddc 	.word	0x08007ddc
 80049ac:	08007d9c 	.word	0x08007d9c

080049b0 <__assert_func>:
 80049b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049b2:	4614      	mov	r4, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <__assert_func+0x2c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4605      	mov	r5, r0
 80049bc:	68d8      	ldr	r0, [r3, #12]
 80049be:	b14c      	cbz	r4, 80049d4 <__assert_func+0x24>
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <__assert_func+0x30>)
 80049c2:	9100      	str	r1, [sp, #0]
 80049c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049c8:	4906      	ldr	r1, [pc, #24]	; (80049e4 <__assert_func+0x34>)
 80049ca:	462b      	mov	r3, r5
 80049cc:	f000 f8e0 	bl	8004b90 <fiprintf>
 80049d0:	f000 fcc8 	bl	8005364 <abort>
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <__assert_func+0x38>)
 80049d6:	461c      	mov	r4, r3
 80049d8:	e7f3      	b.n	80049c2 <__assert_func+0x12>
 80049da:	bf00      	nop
 80049dc:	200001bc 	.word	0x200001bc
 80049e0:	08007e97 	.word	0x08007e97
 80049e4:	08007ea4 	.word	0x08007ea4
 80049e8:	08007ed2 	.word	0x08007ed2

080049ec <_close_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	; (8004a08 <_close_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7ff fa18 	bl	8003e2c <_close>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_close_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_close_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000b00 	.word	0x20000b00

08004a0c <__sflush_r>:
 8004a0c:	898a      	ldrh	r2, [r1, #12]
 8004a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	0710      	lsls	r0, r2, #28
 8004a16:	460c      	mov	r4, r1
 8004a18:	d458      	bmi.n	8004acc <__sflush_r+0xc0>
 8004a1a:	684b      	ldr	r3, [r1, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dc05      	bgt.n	8004a2c <__sflush_r+0x20>
 8004a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	dc02      	bgt.n	8004a2c <__sflush_r+0x20>
 8004a26:	2000      	movs	r0, #0
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	d0f9      	beq.n	8004a26 <__sflush_r+0x1a>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a38:	682f      	ldr	r7, [r5, #0]
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	d032      	beq.n	8004aa4 <__sflush_r+0x98>
 8004a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	075a      	lsls	r2, r3, #29
 8004a44:	d505      	bpl.n	8004a52 <__sflush_r+0x46>
 8004a46:	6863      	ldr	r3, [r4, #4]
 8004a48:	1ac0      	subs	r0, r0, r3
 8004a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a4c:	b10b      	cbz	r3, 8004a52 <__sflush_r+0x46>
 8004a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	4602      	mov	r2, r0
 8004a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a58:	6a21      	ldr	r1, [r4, #32]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b0      	blx	r6
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	d106      	bne.n	8004a72 <__sflush_r+0x66>
 8004a64:	6829      	ldr	r1, [r5, #0]
 8004a66:	291d      	cmp	r1, #29
 8004a68:	d82c      	bhi.n	8004ac4 <__sflush_r+0xb8>
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <__sflush_r+0x108>)
 8004a6c:	40ca      	lsrs	r2, r1
 8004a6e:	07d6      	lsls	r6, r2, #31
 8004a70:	d528      	bpl.n	8004ac4 <__sflush_r+0xb8>
 8004a72:	2200      	movs	r2, #0
 8004a74:	6062      	str	r2, [r4, #4]
 8004a76:	04d9      	lsls	r1, r3, #19
 8004a78:	6922      	ldr	r2, [r4, #16]
 8004a7a:	6022      	str	r2, [r4, #0]
 8004a7c:	d504      	bpl.n	8004a88 <__sflush_r+0x7c>
 8004a7e:	1c42      	adds	r2, r0, #1
 8004a80:	d101      	bne.n	8004a86 <__sflush_r+0x7a>
 8004a82:	682b      	ldr	r3, [r5, #0]
 8004a84:	b903      	cbnz	r3, 8004a88 <__sflush_r+0x7c>
 8004a86:	6560      	str	r0, [r4, #84]	; 0x54
 8004a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a8a:	602f      	str	r7, [r5, #0]
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d0ca      	beq.n	8004a26 <__sflush_r+0x1a>
 8004a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d002      	beq.n	8004a9e <__sflush_r+0x92>
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f917 	bl	8004ccc <_free_r>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa2:	e7c1      	b.n	8004a28 <__sflush_r+0x1c>
 8004aa4:	6a21      	ldr	r1, [r4, #32]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b0      	blx	r6
 8004aac:	1c41      	adds	r1, r0, #1
 8004aae:	d1c7      	bne.n	8004a40 <__sflush_r+0x34>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0c4      	beq.n	8004a40 <__sflush_r+0x34>
 8004ab6:	2b1d      	cmp	r3, #29
 8004ab8:	d001      	beq.n	8004abe <__sflush_r+0xb2>
 8004aba:	2b16      	cmp	r3, #22
 8004abc:	d101      	bne.n	8004ac2 <__sflush_r+0xb6>
 8004abe:	602f      	str	r7, [r5, #0]
 8004ac0:	e7b1      	b.n	8004a26 <__sflush_r+0x1a>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	e7ad      	b.n	8004a28 <__sflush_r+0x1c>
 8004acc:	690f      	ldr	r7, [r1, #16]
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	d0a9      	beq.n	8004a26 <__sflush_r+0x1a>
 8004ad2:	0793      	lsls	r3, r2, #30
 8004ad4:	680e      	ldr	r6, [r1, #0]
 8004ad6:	bf08      	it	eq
 8004ad8:	694b      	ldreq	r3, [r1, #20]
 8004ada:	600f      	str	r7, [r1, #0]
 8004adc:	bf18      	it	ne
 8004ade:	2300      	movne	r3, #0
 8004ae0:	eba6 0807 	sub.w	r8, r6, r7
 8004ae4:	608b      	str	r3, [r1, #8]
 8004ae6:	f1b8 0f00 	cmp.w	r8, #0
 8004aea:	dd9c      	ble.n	8004a26 <__sflush_r+0x1a>
 8004aec:	6a21      	ldr	r1, [r4, #32]
 8004aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af0:	4643      	mov	r3, r8
 8004af2:	463a      	mov	r2, r7
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b0      	blx	r6
 8004af8:	2800      	cmp	r0, #0
 8004afa:	dc06      	bgt.n	8004b0a <__sflush_r+0xfe>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	e78e      	b.n	8004a28 <__sflush_r+0x1c>
 8004b0a:	4407      	add	r7, r0
 8004b0c:	eba8 0800 	sub.w	r8, r8, r0
 8004b10:	e7e9      	b.n	8004ae6 <__sflush_r+0xda>
 8004b12:	bf00      	nop
 8004b14:	20400001 	.word	0x20400001

08004b18 <_fflush_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	690b      	ldr	r3, [r1, #16]
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	b913      	cbnz	r3, 8004b28 <_fflush_r+0x10>
 8004b22:	2500      	movs	r5, #0
 8004b24:	4628      	mov	r0, r5
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	b118      	cbz	r0, 8004b32 <_fflush_r+0x1a>
 8004b2a:	6983      	ldr	r3, [r0, #24]
 8004b2c:	b90b      	cbnz	r3, 8004b32 <_fflush_r+0x1a>
 8004b2e:	f7ff fba7 	bl	8004280 <__sinit>
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <_fflush_r+0x6c>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d11b      	bne.n	8004b70 <_fflush_r+0x58>
 8004b38:	686c      	ldr	r4, [r5, #4]
 8004b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <_fflush_r+0xa>
 8004b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b44:	07d0      	lsls	r0, r2, #31
 8004b46:	d404      	bmi.n	8004b52 <_fflush_r+0x3a>
 8004b48:	0599      	lsls	r1, r3, #22
 8004b4a:	d402      	bmi.n	8004b52 <_fflush_r+0x3a>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4e:	f7ff fc74 	bl	800443a <__retarget_lock_acquire_recursive>
 8004b52:	4628      	mov	r0, r5
 8004b54:	4621      	mov	r1, r4
 8004b56:	f7ff ff59 	bl	8004a0c <__sflush_r>
 8004b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b5c:	07da      	lsls	r2, r3, #31
 8004b5e:	4605      	mov	r5, r0
 8004b60:	d4e0      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	059b      	lsls	r3, r3, #22
 8004b66:	d4dd      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b6a:	f7ff fc67 	bl	800443c <__retarget_lock_release_recursive>
 8004b6e:	e7d9      	b.n	8004b24 <_fflush_r+0xc>
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <_fflush_r+0x70>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d101      	bne.n	8004b7a <_fflush_r+0x62>
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	e7df      	b.n	8004b3a <_fflush_r+0x22>
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <_fflush_r+0x74>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	bf08      	it	eq
 8004b80:	68ec      	ldreq	r4, [r5, #12]
 8004b82:	e7da      	b.n	8004b3a <_fflush_r+0x22>
 8004b84:	08007dbc 	.word	0x08007dbc
 8004b88:	08007ddc 	.word	0x08007ddc
 8004b8c:	08007d9c 	.word	0x08007d9c

08004b90 <fiprintf>:
 8004b90:	b40e      	push	{r1, r2, r3}
 8004b92:	b503      	push	{r0, r1, lr}
 8004b94:	4601      	mov	r1, r0
 8004b96:	ab03      	add	r3, sp, #12
 8004b98:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <fiprintf+0x20>)
 8004b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9e:	6800      	ldr	r0, [r0, #0]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	f000 f909 	bl	8004db8 <_vfiprintf_r>
 8004ba6:	b002      	add	sp, #8
 8004ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bac:	b003      	add	sp, #12
 8004bae:	4770      	bx	lr
 8004bb0:	200001bc 	.word	0x200001bc

08004bb4 <_lseek_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d07      	ldr	r5, [pc, #28]	; (8004bd4 <_lseek_r+0x20>)
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7ff f8ef 	bl	8003da6 <_lseek>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_lseek_r+0x1e>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_lseek_r+0x1e>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000b00 	.word	0x20000b00

08004bd8 <__swhatbuf_r>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	460e      	mov	r6, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	2900      	cmp	r1, #0
 8004be2:	b096      	sub	sp, #88	; 0x58
 8004be4:	4614      	mov	r4, r2
 8004be6:	461d      	mov	r5, r3
 8004be8:	da08      	bge.n	8004bfc <__swhatbuf_r+0x24>
 8004bea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	061a      	lsls	r2, r3, #24
 8004bf4:	d410      	bmi.n	8004c18 <__swhatbuf_r+0x40>
 8004bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfa:	e00e      	b.n	8004c1a <__swhatbuf_r+0x42>
 8004bfc:	466a      	mov	r2, sp
 8004bfe:	f000 fbb9 	bl	8005374 <_fstat_r>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	dbf1      	blt.n	8004bea <__swhatbuf_r+0x12>
 8004c06:	9a01      	ldr	r2, [sp, #4]
 8004c08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c10:	425a      	negs	r2, r3
 8004c12:	415a      	adcs	r2, r3
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	e7ee      	b.n	8004bf6 <__swhatbuf_r+0x1e>
 8004c18:	2340      	movs	r3, #64	; 0x40
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	b016      	add	sp, #88	; 0x58
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c24 <__smakebuf_r>:
 8004c24:	898b      	ldrh	r3, [r1, #12]
 8004c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c28:	079d      	lsls	r5, r3, #30
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	d507      	bpl.n	8004c40 <__smakebuf_r+0x1c>
 8004c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	6163      	str	r3, [r4, #20]
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	ab01      	add	r3, sp, #4
 8004c42:	466a      	mov	r2, sp
 8004c44:	f7ff ffc8 	bl	8004bd8 <__swhatbuf_r>
 8004c48:	9900      	ldr	r1, [sp, #0]
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff fc1f 	bl	8004490 <_malloc_r>
 8004c52:	b948      	cbnz	r0, 8004c68 <__smakebuf_r+0x44>
 8004c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c58:	059a      	lsls	r2, r3, #22
 8004c5a:	d4ef      	bmi.n	8004c3c <__smakebuf_r+0x18>
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7e3      	b.n	8004c30 <__smakebuf_r+0xc>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <__smakebuf_r+0x7c>)
 8004c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	6020      	str	r0, [r4, #0]
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	6163      	str	r3, [r4, #20]
 8004c7a:	9b01      	ldr	r3, [sp, #4]
 8004c7c:	6120      	str	r0, [r4, #16]
 8004c7e:	b15b      	cbz	r3, 8004c98 <__smakebuf_r+0x74>
 8004c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 fb87 	bl	8005398 <_isatty_r>
 8004c8a:	b128      	cbz	r0, 8004c98 <__smakebuf_r+0x74>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	89a0      	ldrh	r0, [r4, #12]
 8004c9a:	4305      	orrs	r5, r0
 8004c9c:	81a5      	strh	r5, [r4, #12]
 8004c9e:	e7cd      	b.n	8004c3c <__smakebuf_r+0x18>
 8004ca0:	08004219 	.word	0x08004219

08004ca4 <malloc>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <malloc+0xc>)
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f7ff bbf1 	b.w	8004490 <_malloc_r>
 8004cae:	bf00      	nop
 8004cb0:	200001bc 	.word	0x200001bc

08004cb4 <__malloc_lock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__malloc_lock+0x8>)
 8004cb6:	f7ff bbc0 	b.w	800443a <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	20000af4 	.word	0x20000af4

08004cc0 <__malloc_unlock>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__malloc_unlock+0x8>)
 8004cc2:	f7ff bbbb 	b.w	800443c <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	20000af4 	.word	0x20000af4

08004ccc <_free_r>:
 8004ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	d044      	beq.n	8004d5c <_free_r+0x90>
 8004cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd6:	9001      	str	r0, [sp, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f1a1 0404 	sub.w	r4, r1, #4
 8004cde:	bfb8      	it	lt
 8004ce0:	18e4      	addlt	r4, r4, r3
 8004ce2:	f7ff ffe7 	bl	8004cb4 <__malloc_lock>
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <_free_r+0x94>)
 8004ce8:	9801      	ldr	r0, [sp, #4]
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	b933      	cbnz	r3, 8004cfc <_free_r+0x30>
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	6014      	str	r4, [r2, #0]
 8004cf2:	b003      	add	sp, #12
 8004cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cf8:	f7ff bfe2 	b.w	8004cc0 <__malloc_unlock>
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d908      	bls.n	8004d12 <_free_r+0x46>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	1961      	adds	r1, r4, r5
 8004d04:	428b      	cmp	r3, r1
 8004d06:	bf01      	itttt	eq
 8004d08:	6819      	ldreq	r1, [r3, #0]
 8004d0a:	685b      	ldreq	r3, [r3, #4]
 8004d0c:	1949      	addeq	r1, r1, r5
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	e7ed      	b.n	8004cee <_free_r+0x22>
 8004d12:	461a      	mov	r2, r3
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	b10b      	cbz	r3, 8004d1c <_free_r+0x50>
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d9fa      	bls.n	8004d12 <_free_r+0x46>
 8004d1c:	6811      	ldr	r1, [r2, #0]
 8004d1e:	1855      	adds	r5, r2, r1
 8004d20:	42a5      	cmp	r5, r4
 8004d22:	d10b      	bne.n	8004d3c <_free_r+0x70>
 8004d24:	6824      	ldr	r4, [r4, #0]
 8004d26:	4421      	add	r1, r4
 8004d28:	1854      	adds	r4, r2, r1
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	6011      	str	r1, [r2, #0]
 8004d2e:	d1e0      	bne.n	8004cf2 <_free_r+0x26>
 8004d30:	681c      	ldr	r4, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	6053      	str	r3, [r2, #4]
 8004d36:	4421      	add	r1, r4
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	e7da      	b.n	8004cf2 <_free_r+0x26>
 8004d3c:	d902      	bls.n	8004d44 <_free_r+0x78>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	6003      	str	r3, [r0, #0]
 8004d42:	e7d6      	b.n	8004cf2 <_free_r+0x26>
 8004d44:	6825      	ldr	r5, [r4, #0]
 8004d46:	1961      	adds	r1, r4, r5
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	bf04      	itt	eq
 8004d4c:	6819      	ldreq	r1, [r3, #0]
 8004d4e:	685b      	ldreq	r3, [r3, #4]
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	bf04      	itt	eq
 8004d54:	1949      	addeq	r1, r1, r5
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	6054      	str	r4, [r2, #4]
 8004d5a:	e7ca      	b.n	8004cf2 <_free_r+0x26>
 8004d5c:	b003      	add	sp, #12
 8004d5e:	bd30      	pop	{r4, r5, pc}
 8004d60:	20000af8 	.word	0x20000af8

08004d64 <__sfputc_r>:
 8004d64:	6893      	ldr	r3, [r2, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	b410      	push	{r4}
 8004d6c:	6093      	str	r3, [r2, #8]
 8004d6e:	da08      	bge.n	8004d82 <__sfputc_r+0x1e>
 8004d70:	6994      	ldr	r4, [r2, #24]
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	db01      	blt.n	8004d7a <__sfputc_r+0x16>
 8004d76:	290a      	cmp	r1, #10
 8004d78:	d103      	bne.n	8004d82 <__sfputc_r+0x1e>
 8004d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d7e:	f7ff bd45 	b.w	800480c <__swbuf_r>
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	1c58      	adds	r0, r3, #1
 8004d86:	6010      	str	r0, [r2, #0]
 8004d88:	7019      	strb	r1, [r3, #0]
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <__sfputs_r>:
 8004d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d94:	4606      	mov	r6, r0
 8004d96:	460f      	mov	r7, r1
 8004d98:	4614      	mov	r4, r2
 8004d9a:	18d5      	adds	r5, r2, r3
 8004d9c:	42ac      	cmp	r4, r5
 8004d9e:	d101      	bne.n	8004da4 <__sfputs_r+0x12>
 8004da0:	2000      	movs	r0, #0
 8004da2:	e007      	b.n	8004db4 <__sfputs_r+0x22>
 8004da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da8:	463a      	mov	r2, r7
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7ff ffda 	bl	8004d64 <__sfputc_r>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d1f3      	bne.n	8004d9c <__sfputs_r+0xa>
 8004db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004db8 <_vfiprintf_r>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	b09d      	sub	sp, #116	; 0x74
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	4698      	mov	r8, r3
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	b118      	cbz	r0, 8004dd0 <_vfiprintf_r+0x18>
 8004dc8:	6983      	ldr	r3, [r0, #24]
 8004dca:	b90b      	cbnz	r3, 8004dd0 <_vfiprintf_r+0x18>
 8004dcc:	f7ff fa58 	bl	8004280 <__sinit>
 8004dd0:	4b89      	ldr	r3, [pc, #548]	; (8004ff8 <_vfiprintf_r+0x240>)
 8004dd2:	429d      	cmp	r5, r3
 8004dd4:	d11b      	bne.n	8004e0e <_vfiprintf_r+0x56>
 8004dd6:	6875      	ldr	r5, [r6, #4]
 8004dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dda:	07d9      	lsls	r1, r3, #31
 8004ddc:	d405      	bmi.n	8004dea <_vfiprintf_r+0x32>
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	059a      	lsls	r2, r3, #22
 8004de2:	d402      	bmi.n	8004dea <_vfiprintf_r+0x32>
 8004de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004de6:	f7ff fb28 	bl	800443a <__retarget_lock_acquire_recursive>
 8004dea:	89ab      	ldrh	r3, [r5, #12]
 8004dec:	071b      	lsls	r3, r3, #28
 8004dee:	d501      	bpl.n	8004df4 <_vfiprintf_r+0x3c>
 8004df0:	692b      	ldr	r3, [r5, #16]
 8004df2:	b9eb      	cbnz	r3, 8004e30 <_vfiprintf_r+0x78>
 8004df4:	4629      	mov	r1, r5
 8004df6:	4630      	mov	r0, r6
 8004df8:	f7ff fd6c 	bl	80048d4 <__swsetup_r>
 8004dfc:	b1c0      	cbz	r0, 8004e30 <_vfiprintf_r+0x78>
 8004dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e00:	07dc      	lsls	r4, r3, #31
 8004e02:	d50e      	bpl.n	8004e22 <_vfiprintf_r+0x6a>
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	b01d      	add	sp, #116	; 0x74
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	4b7b      	ldr	r3, [pc, #492]	; (8004ffc <_vfiprintf_r+0x244>)
 8004e10:	429d      	cmp	r5, r3
 8004e12:	d101      	bne.n	8004e18 <_vfiprintf_r+0x60>
 8004e14:	68b5      	ldr	r5, [r6, #8]
 8004e16:	e7df      	b.n	8004dd8 <_vfiprintf_r+0x20>
 8004e18:	4b79      	ldr	r3, [pc, #484]	; (8005000 <_vfiprintf_r+0x248>)
 8004e1a:	429d      	cmp	r5, r3
 8004e1c:	bf08      	it	eq
 8004e1e:	68f5      	ldreq	r5, [r6, #12]
 8004e20:	e7da      	b.n	8004dd8 <_vfiprintf_r+0x20>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	0598      	lsls	r0, r3, #22
 8004e26:	d4ed      	bmi.n	8004e04 <_vfiprintf_r+0x4c>
 8004e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e2a:	f7ff fb07 	bl	800443c <__retarget_lock_release_recursive>
 8004e2e:	e7e9      	b.n	8004e04 <_vfiprintf_r+0x4c>
 8004e30:	2300      	movs	r3, #0
 8004e32:	9309      	str	r3, [sp, #36]	; 0x24
 8004e34:	2320      	movs	r3, #32
 8004e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e3e:	2330      	movs	r3, #48	; 0x30
 8004e40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005004 <_vfiprintf_r+0x24c>
 8004e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e48:	f04f 0901 	mov.w	r9, #1
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	469a      	mov	sl, r3
 8004e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e54:	b10a      	cbz	r2, 8004e5a <_vfiprintf_r+0xa2>
 8004e56:	2a25      	cmp	r2, #37	; 0x25
 8004e58:	d1f9      	bne.n	8004e4e <_vfiprintf_r+0x96>
 8004e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e5e:	d00b      	beq.n	8004e78 <_vfiprintf_r+0xc0>
 8004e60:	465b      	mov	r3, fp
 8004e62:	4622      	mov	r2, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	4630      	mov	r0, r6
 8004e68:	f7ff ff93 	bl	8004d92 <__sfputs_r>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f000 80aa 	beq.w	8004fc6 <_vfiprintf_r+0x20e>
 8004e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e74:	445a      	add	r2, fp
 8004e76:	9209      	str	r2, [sp, #36]	; 0x24
 8004e78:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a2 	beq.w	8004fc6 <_vfiprintf_r+0x20e>
 8004e82:	2300      	movs	r3, #0
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295
 8004e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e8c:	f10a 0a01 	add.w	sl, sl, #1
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e98:	931a      	str	r3, [sp, #104]	; 0x68
 8004e9a:	4654      	mov	r4, sl
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea2:	4858      	ldr	r0, [pc, #352]	; (8005004 <_vfiprintf_r+0x24c>)
 8004ea4:	f7fb f9a4 	bl	80001f0 <memchr>
 8004ea8:	9a04      	ldr	r2, [sp, #16]
 8004eaa:	b9d8      	cbnz	r0, 8004ee4 <_vfiprintf_r+0x12c>
 8004eac:	06d1      	lsls	r1, r2, #27
 8004eae:	bf44      	itt	mi
 8004eb0:	2320      	movmi	r3, #32
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb6:	0713      	lsls	r3, r2, #28
 8004eb8:	bf44      	itt	mi
 8004eba:	232b      	movmi	r3, #43	; 0x2b
 8004ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec6:	d015      	beq.n	8004ef4 <_vfiprintf_r+0x13c>
 8004ec8:	9a07      	ldr	r2, [sp, #28]
 8004eca:	4654      	mov	r4, sl
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f04f 0c0a 	mov.w	ip, #10
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ed8:	3b30      	subs	r3, #48	; 0x30
 8004eda:	2b09      	cmp	r3, #9
 8004edc:	d94e      	bls.n	8004f7c <_vfiprintf_r+0x1c4>
 8004ede:	b1b0      	cbz	r0, 8004f0e <_vfiprintf_r+0x156>
 8004ee0:	9207      	str	r2, [sp, #28]
 8004ee2:	e014      	b.n	8004f0e <_vfiprintf_r+0x156>
 8004ee4:	eba0 0308 	sub.w	r3, r0, r8
 8004ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8004eec:	4313      	orrs	r3, r2
 8004eee:	9304      	str	r3, [sp, #16]
 8004ef0:	46a2      	mov	sl, r4
 8004ef2:	e7d2      	b.n	8004e9a <_vfiprintf_r+0xe2>
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	1d19      	adds	r1, r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	9103      	str	r1, [sp, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bfbb      	ittet	lt
 8004f00:	425b      	neglt	r3, r3
 8004f02:	f042 0202 	orrlt.w	r2, r2, #2
 8004f06:	9307      	strge	r3, [sp, #28]
 8004f08:	9307      	strlt	r3, [sp, #28]
 8004f0a:	bfb8      	it	lt
 8004f0c:	9204      	strlt	r2, [sp, #16]
 8004f0e:	7823      	ldrb	r3, [r4, #0]
 8004f10:	2b2e      	cmp	r3, #46	; 0x2e
 8004f12:	d10c      	bne.n	8004f2e <_vfiprintf_r+0x176>
 8004f14:	7863      	ldrb	r3, [r4, #1]
 8004f16:	2b2a      	cmp	r3, #42	; 0x2a
 8004f18:	d135      	bne.n	8004f86 <_vfiprintf_r+0x1ce>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	9203      	str	r2, [sp, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfb8      	it	lt
 8004f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f2a:	3402      	adds	r4, #2
 8004f2c:	9305      	str	r3, [sp, #20]
 8004f2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005014 <_vfiprintf_r+0x25c>
 8004f32:	7821      	ldrb	r1, [r4, #0]
 8004f34:	2203      	movs	r2, #3
 8004f36:	4650      	mov	r0, sl
 8004f38:	f7fb f95a 	bl	80001f0 <memchr>
 8004f3c:	b140      	cbz	r0, 8004f50 <_vfiprintf_r+0x198>
 8004f3e:	2340      	movs	r3, #64	; 0x40
 8004f40:	eba0 000a 	sub.w	r0, r0, sl
 8004f44:	fa03 f000 	lsl.w	r0, r3, r0
 8004f48:	9b04      	ldr	r3, [sp, #16]
 8004f4a:	4303      	orrs	r3, r0
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f54:	482c      	ldr	r0, [pc, #176]	; (8005008 <_vfiprintf_r+0x250>)
 8004f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f5a:	2206      	movs	r2, #6
 8004f5c:	f7fb f948 	bl	80001f0 <memchr>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d03f      	beq.n	8004fe4 <_vfiprintf_r+0x22c>
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <_vfiprintf_r+0x254>)
 8004f66:	bb1b      	cbnz	r3, 8004fb0 <_vfiprintf_r+0x1f8>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	f023 0307 	bic.w	r3, r3, #7
 8004f70:	3308      	adds	r3, #8
 8004f72:	9303      	str	r3, [sp, #12]
 8004f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f76:	443b      	add	r3, r7
 8004f78:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7a:	e767      	b.n	8004e4c <_vfiprintf_r+0x94>
 8004f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f80:	460c      	mov	r4, r1
 8004f82:	2001      	movs	r0, #1
 8004f84:	e7a5      	b.n	8004ed2 <_vfiprintf_r+0x11a>
 8004f86:	2300      	movs	r3, #0
 8004f88:	3401      	adds	r4, #1
 8004f8a:	9305      	str	r3, [sp, #20]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f04f 0c0a 	mov.w	ip, #10
 8004f92:	4620      	mov	r0, r4
 8004f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f98:	3a30      	subs	r2, #48	; 0x30
 8004f9a:	2a09      	cmp	r2, #9
 8004f9c:	d903      	bls.n	8004fa6 <_vfiprintf_r+0x1ee>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0c5      	beq.n	8004f2e <_vfiprintf_r+0x176>
 8004fa2:	9105      	str	r1, [sp, #20]
 8004fa4:	e7c3      	b.n	8004f2e <_vfiprintf_r+0x176>
 8004fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004faa:	4604      	mov	r4, r0
 8004fac:	2301      	movs	r3, #1
 8004fae:	e7f0      	b.n	8004f92 <_vfiprintf_r+0x1da>
 8004fb0:	ab03      	add	r3, sp, #12
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	462a      	mov	r2, r5
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <_vfiprintf_r+0x258>)
 8004fb8:	a904      	add	r1, sp, #16
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	1c78      	adds	r0, r7, #1
 8004fc4:	d1d6      	bne.n	8004f74 <_vfiprintf_r+0x1bc>
 8004fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fc8:	07d9      	lsls	r1, r3, #31
 8004fca:	d405      	bmi.n	8004fd8 <_vfiprintf_r+0x220>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	059a      	lsls	r2, r3, #22
 8004fd0:	d402      	bmi.n	8004fd8 <_vfiprintf_r+0x220>
 8004fd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd4:	f7ff fa32 	bl	800443c <__retarget_lock_release_recursive>
 8004fd8:	89ab      	ldrh	r3, [r5, #12]
 8004fda:	065b      	lsls	r3, r3, #25
 8004fdc:	f53f af12 	bmi.w	8004e04 <_vfiprintf_r+0x4c>
 8004fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe2:	e711      	b.n	8004e08 <_vfiprintf_r+0x50>
 8004fe4:	ab03      	add	r3, sp, #12
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	462a      	mov	r2, r5
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <_vfiprintf_r+0x258>)
 8004fec:	a904      	add	r1, sp, #16
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f000 f880 	bl	80050f4 <_printf_i>
 8004ff4:	e7e4      	b.n	8004fc0 <_vfiprintf_r+0x208>
 8004ff6:	bf00      	nop
 8004ff8:	08007dbc 	.word	0x08007dbc
 8004ffc:	08007ddc 	.word	0x08007ddc
 8005000:	08007d9c 	.word	0x08007d9c
 8005004:	08007ed3 	.word	0x08007ed3
 8005008:	08007edd 	.word	0x08007edd
 800500c:	00000000 	.word	0x00000000
 8005010:	08004d93 	.word	0x08004d93
 8005014:	08007ed9 	.word	0x08007ed9

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4616      	mov	r6, r2
 800501e:	4699      	mov	r9, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005028:	4293      	cmp	r3, r2
 800502a:	bfb8      	it	lt
 800502c:	4613      	movlt	r3, r2
 800502e:	6033      	str	r3, [r6, #0]
 8005030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005034:	4607      	mov	r7, r0
 8005036:	460c      	mov	r4, r1
 8005038:	b10a      	cbz	r2, 800503e <_printf_common+0x26>
 800503a:	3301      	adds	r3, #1
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	bf42      	ittt	mi
 8005044:	6833      	ldrmi	r3, [r6, #0]
 8005046:	3302      	addmi	r3, #2
 8005048:	6033      	strmi	r3, [r6, #0]
 800504a:	6825      	ldr	r5, [r4, #0]
 800504c:	f015 0506 	ands.w	r5, r5, #6
 8005050:	d106      	bne.n	8005060 <_printf_common+0x48>
 8005052:	f104 0a19 	add.w	sl, r4, #25
 8005056:	68e3      	ldr	r3, [r4, #12]
 8005058:	6832      	ldr	r2, [r6, #0]
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	42ab      	cmp	r3, r5
 800505e:	dc26      	bgt.n	80050ae <_printf_common+0x96>
 8005060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005064:	1e13      	subs	r3, r2, #0
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	2301      	movne	r3, #1
 800506c:	0692      	lsls	r2, r2, #26
 800506e:	d42b      	bmi.n	80050c8 <_printf_common+0xb0>
 8005070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005074:	4649      	mov	r1, r9
 8005076:	4638      	mov	r0, r7
 8005078:	47c0      	blx	r8
 800507a:	3001      	adds	r0, #1
 800507c:	d01e      	beq.n	80050bc <_printf_common+0xa4>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	68e5      	ldr	r5, [r4, #12]
 8005082:	6832      	ldr	r2, [r6, #0]
 8005084:	f003 0306 	and.w	r3, r3, #6
 8005088:	2b04      	cmp	r3, #4
 800508a:	bf08      	it	eq
 800508c:	1aad      	subeq	r5, r5, r2
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	bf0c      	ite	eq
 8005094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005098:	2500      	movne	r5, #0
 800509a:	4293      	cmp	r3, r2
 800509c:	bfc4      	itt	gt
 800509e:	1a9b      	subgt	r3, r3, r2
 80050a0:	18ed      	addgt	r5, r5, r3
 80050a2:	2600      	movs	r6, #0
 80050a4:	341a      	adds	r4, #26
 80050a6:	42b5      	cmp	r5, r6
 80050a8:	d11a      	bne.n	80050e0 <_printf_common+0xc8>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e008      	b.n	80050c0 <_printf_common+0xa8>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4652      	mov	r2, sl
 80050b2:	4649      	mov	r1, r9
 80050b4:	4638      	mov	r0, r7
 80050b6:	47c0      	blx	r8
 80050b8:	3001      	adds	r0, #1
 80050ba:	d103      	bne.n	80050c4 <_printf_common+0xac>
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	3501      	adds	r5, #1
 80050c6:	e7c6      	b.n	8005056 <_printf_common+0x3e>
 80050c8:	18e1      	adds	r1, r4, r3
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	2030      	movs	r0, #48	; 0x30
 80050ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d2:	4422      	add	r2, r4
 80050d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050dc:	3302      	adds	r3, #2
 80050de:	e7c7      	b.n	8005070 <_printf_common+0x58>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4622      	mov	r2, r4
 80050e4:	4649      	mov	r1, r9
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0e6      	beq.n	80050bc <_printf_common+0xa4>
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7d9      	b.n	80050a6 <_printf_common+0x8e>
	...

080050f4 <_printf_i>:
 80050f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	7e0f      	ldrb	r7, [r1, #24]
 80050fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050fc:	2f78      	cmp	r7, #120	; 0x78
 80050fe:	4691      	mov	r9, r2
 8005100:	4680      	mov	r8, r0
 8005102:	460c      	mov	r4, r1
 8005104:	469a      	mov	sl, r3
 8005106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800510a:	d807      	bhi.n	800511c <_printf_i+0x28>
 800510c:	2f62      	cmp	r7, #98	; 0x62
 800510e:	d80a      	bhi.n	8005126 <_printf_i+0x32>
 8005110:	2f00      	cmp	r7, #0
 8005112:	f000 80d8 	beq.w	80052c6 <_printf_i+0x1d2>
 8005116:	2f58      	cmp	r7, #88	; 0x58
 8005118:	f000 80a3 	beq.w	8005262 <_printf_i+0x16e>
 800511c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005124:	e03a      	b.n	800519c <_printf_i+0xa8>
 8005126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512a:	2b15      	cmp	r3, #21
 800512c:	d8f6      	bhi.n	800511c <_printf_i+0x28>
 800512e:	a101      	add	r1, pc, #4	; (adr r1, 8005134 <_printf_i+0x40>)
 8005130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005134:	0800518d 	.word	0x0800518d
 8005138:	080051a1 	.word	0x080051a1
 800513c:	0800511d 	.word	0x0800511d
 8005140:	0800511d 	.word	0x0800511d
 8005144:	0800511d 	.word	0x0800511d
 8005148:	0800511d 	.word	0x0800511d
 800514c:	080051a1 	.word	0x080051a1
 8005150:	0800511d 	.word	0x0800511d
 8005154:	0800511d 	.word	0x0800511d
 8005158:	0800511d 	.word	0x0800511d
 800515c:	0800511d 	.word	0x0800511d
 8005160:	080052ad 	.word	0x080052ad
 8005164:	080051d1 	.word	0x080051d1
 8005168:	0800528f 	.word	0x0800528f
 800516c:	0800511d 	.word	0x0800511d
 8005170:	0800511d 	.word	0x0800511d
 8005174:	080052cf 	.word	0x080052cf
 8005178:	0800511d 	.word	0x0800511d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800511d 	.word	0x0800511d
 8005184:	0800511d 	.word	0x0800511d
 8005188:	08005297 	.word	0x08005297
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800519c:	2301      	movs	r3, #1
 800519e:	e0a3      	b.n	80052e8 <_printf_i+0x1f4>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	6829      	ldr	r1, [r5, #0]
 80051a4:	0606      	lsls	r6, r0, #24
 80051a6:	f101 0304 	add.w	r3, r1, #4
 80051aa:	d50a      	bpl.n	80051c2 <_printf_i+0xce>
 80051ac:	680e      	ldr	r6, [r1, #0]
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	da03      	bge.n	80051bc <_printf_i+0xc8>
 80051b4:	232d      	movs	r3, #45	; 0x2d
 80051b6:	4276      	negs	r6, r6
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	485e      	ldr	r0, [pc, #376]	; (8005338 <_printf_i+0x244>)
 80051be:	230a      	movs	r3, #10
 80051c0:	e019      	b.n	80051f6 <_printf_i+0x102>
 80051c2:	680e      	ldr	r6, [r1, #0]
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ca:	bf18      	it	ne
 80051cc:	b236      	sxthne	r6, r6
 80051ce:	e7ef      	b.n	80051b0 <_printf_i+0xbc>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	1d19      	adds	r1, r3, #4
 80051d6:	6029      	str	r1, [r5, #0]
 80051d8:	0601      	lsls	r1, r0, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0xec>
 80051dc:	681e      	ldr	r6, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0xf2>
 80051e0:	0646      	lsls	r6, r0, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0xe8>
 80051e4:	881e      	ldrh	r6, [r3, #0]
 80051e6:	4854      	ldr	r0, [pc, #336]	; (8005338 <_printf_i+0x244>)
 80051e8:	2f6f      	cmp	r7, #111	; 0x6f
 80051ea:	bf0c      	ite	eq
 80051ec:	2308      	moveq	r3, #8
 80051ee:	230a      	movne	r3, #10
 80051f0:	2100      	movs	r1, #0
 80051f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f6:	6865      	ldr	r5, [r4, #4]
 80051f8:	60a5      	str	r5, [r4, #8]
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	bfa2      	ittt	ge
 80051fe:	6821      	ldrge	r1, [r4, #0]
 8005200:	f021 0104 	bicge.w	r1, r1, #4
 8005204:	6021      	strge	r1, [r4, #0]
 8005206:	b90e      	cbnz	r6, 800520c <_printf_i+0x118>
 8005208:	2d00      	cmp	r5, #0
 800520a:	d04d      	beq.n	80052a8 <_printf_i+0x1b4>
 800520c:	4615      	mov	r5, r2
 800520e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005212:	fb03 6711 	mls	r7, r3, r1, r6
 8005216:	5dc7      	ldrb	r7, [r0, r7]
 8005218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800521c:	4637      	mov	r7, r6
 800521e:	42bb      	cmp	r3, r7
 8005220:	460e      	mov	r6, r1
 8005222:	d9f4      	bls.n	800520e <_printf_i+0x11a>
 8005224:	2b08      	cmp	r3, #8
 8005226:	d10b      	bne.n	8005240 <_printf_i+0x14c>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07de      	lsls	r6, r3, #31
 800522c:	d508      	bpl.n	8005240 <_printf_i+0x14c>
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	6861      	ldr	r1, [r4, #4]
 8005232:	4299      	cmp	r1, r3
 8005234:	bfde      	ittt	le
 8005236:	2330      	movle	r3, #48	; 0x30
 8005238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800523c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005240:	1b52      	subs	r2, r2, r5
 8005242:	6122      	str	r2, [r4, #16]
 8005244:	f8cd a000 	str.w	sl, [sp]
 8005248:	464b      	mov	r3, r9
 800524a:	aa03      	add	r2, sp, #12
 800524c:	4621      	mov	r1, r4
 800524e:	4640      	mov	r0, r8
 8005250:	f7ff fee2 	bl	8005018 <_printf_common>
 8005254:	3001      	adds	r0, #1
 8005256:	d14c      	bne.n	80052f2 <_printf_i+0x1fe>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	b004      	add	sp, #16
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	4835      	ldr	r0, [pc, #212]	; (8005338 <_printf_i+0x244>)
 8005264:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005268:	6829      	ldr	r1, [r5, #0]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005270:	6029      	str	r1, [r5, #0]
 8005272:	061d      	lsls	r5, r3, #24
 8005274:	d514      	bpl.n	80052a0 <_printf_i+0x1ac>
 8005276:	07df      	lsls	r7, r3, #31
 8005278:	bf44      	itt	mi
 800527a:	f043 0320 	orrmi.w	r3, r3, #32
 800527e:	6023      	strmi	r3, [r4, #0]
 8005280:	b91e      	cbnz	r6, 800528a <_printf_i+0x196>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f023 0320 	bic.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	2310      	movs	r3, #16
 800528c:	e7b0      	b.n	80051f0 <_printf_i+0xfc>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f043 0320 	orr.w	r3, r3, #32
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	2378      	movs	r3, #120	; 0x78
 8005298:	4828      	ldr	r0, [pc, #160]	; (800533c <_printf_i+0x248>)
 800529a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529e:	e7e3      	b.n	8005268 <_printf_i+0x174>
 80052a0:	0659      	lsls	r1, r3, #25
 80052a2:	bf48      	it	mi
 80052a4:	b2b6      	uxthmi	r6, r6
 80052a6:	e7e6      	b.n	8005276 <_printf_i+0x182>
 80052a8:	4615      	mov	r5, r2
 80052aa:	e7bb      	b.n	8005224 <_printf_i+0x130>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6826      	ldr	r6, [r4, #0]
 80052b0:	6961      	ldr	r1, [r4, #20]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6028      	str	r0, [r5, #0]
 80052b6:	0635      	lsls	r5, r6, #24
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0x1cc>
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_printf_i+0x1d2>
 80052c0:	0670      	lsls	r0, r6, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0x1c8>
 80052c4:	8019      	strh	r1, [r3, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	4615      	mov	r5, r2
 80052cc:	e7ba      	b.n	8005244 <_printf_i+0x150>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	2100      	movs	r1, #0
 80052da:	4628      	mov	r0, r5
 80052dc:	f7fa ff88 	bl	80001f0 <memchr>
 80052e0:	b108      	cbz	r0, 80052e6 <_printf_i+0x1f2>
 80052e2:	1b40      	subs	r0, r0, r5
 80052e4:	6060      	str	r0, [r4, #4]
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	2300      	movs	r3, #0
 80052ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f0:	e7a8      	b.n	8005244 <_printf_i+0x150>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	462a      	mov	r2, r5
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d0ab      	beq.n	8005258 <_printf_i+0x164>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	079b      	lsls	r3, r3, #30
 8005304:	d413      	bmi.n	800532e <_printf_i+0x23a>
 8005306:	68e0      	ldr	r0, [r4, #12]
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	4298      	cmp	r0, r3
 800530c:	bfb8      	it	lt
 800530e:	4618      	movlt	r0, r3
 8005310:	e7a4      	b.n	800525c <_printf_i+0x168>
 8005312:	2301      	movs	r3, #1
 8005314:	4632      	mov	r2, r6
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	47d0      	blx	sl
 800531c:	3001      	adds	r0, #1
 800531e:	d09b      	beq.n	8005258 <_printf_i+0x164>
 8005320:	3501      	adds	r5, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	9903      	ldr	r1, [sp, #12]
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	42ab      	cmp	r3, r5
 800532a:	dcf2      	bgt.n	8005312 <_printf_i+0x21e>
 800532c:	e7eb      	b.n	8005306 <_printf_i+0x212>
 800532e:	2500      	movs	r5, #0
 8005330:	f104 0619 	add.w	r6, r4, #25
 8005334:	e7f5      	b.n	8005322 <_printf_i+0x22e>
 8005336:	bf00      	nop
 8005338:	08007ee4 	.word	0x08007ee4
 800533c:	08007ef5 	.word	0x08007ef5

08005340 <_read_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	; (8005360 <_read_r+0x20>)
 8005344:	4604      	mov	r4, r0
 8005346:	4608      	mov	r0, r1
 8005348:	4611      	mov	r1, r2
 800534a:	2200      	movs	r2, #0
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7fe fcd1 	bl	8003cf6 <_read>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_read_r+0x1e>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_read_r+0x1e>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	20000b00 	.word	0x20000b00

08005364 <abort>:
 8005364:	b508      	push	{r3, lr}
 8005366:	2006      	movs	r0, #6
 8005368:	f000 f84e 	bl	8005408 <raise>
 800536c:	2001      	movs	r0, #1
 800536e:	f000 f86f 	bl	8005450 <_exit>
	...

08005374 <_fstat_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d07      	ldr	r5, [pc, #28]	; (8005394 <_fstat_r+0x20>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	f7fe fd9c 	bl	8003ebe <_fstat>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d102      	bne.n	8005390 <_fstat_r+0x1c>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	b103      	cbz	r3, 8005390 <_fstat_r+0x1c>
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	bf00      	nop
 8005394:	20000b00 	.word	0x20000b00

08005398 <_isatty_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d06      	ldr	r5, [pc, #24]	; (80053b4 <_isatty_r+0x1c>)
 800539c:	2300      	movs	r3, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	f7fe fef2 	bl	800418c <_isatty>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_isatty_r+0x1a>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_isatty_r+0x1a>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000b00 	.word	0x20000b00

080053b8 <_raise_r>:
 80053b8:	291f      	cmp	r1, #31
 80053ba:	b538      	push	{r3, r4, r5, lr}
 80053bc:	4604      	mov	r4, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	d904      	bls.n	80053cc <_raise_r+0x14>
 80053c2:	2316      	movs	r3, #22
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053ce:	b112      	cbz	r2, 80053d6 <_raise_r+0x1e>
 80053d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053d4:	b94b      	cbnz	r3, 80053ea <_raise_r+0x32>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f830 	bl	800543c <_getpid_r>
 80053dc:	462a      	mov	r2, r5
 80053de:	4601      	mov	r1, r0
 80053e0:	4620      	mov	r0, r4
 80053e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e6:	f000 b817 	b.w	8005418 <_kill_r>
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d00a      	beq.n	8005404 <_raise_r+0x4c>
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	d103      	bne.n	80053fa <_raise_r+0x42>
 80053f2:	2316      	movs	r3, #22
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	2001      	movs	r0, #1
 80053f8:	e7e7      	b.n	80053ca <_raise_r+0x12>
 80053fa:	2400      	movs	r4, #0
 80053fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005400:	4628      	mov	r0, r5
 8005402:	4798      	blx	r3
 8005404:	2000      	movs	r0, #0
 8005406:	e7e0      	b.n	80053ca <_raise_r+0x12>

08005408 <raise>:
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <raise+0xc>)
 800540a:	4601      	mov	r1, r0
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f7ff bfd3 	b.w	80053b8 <_raise_r>
 8005412:	bf00      	nop
 8005414:	200001bc 	.word	0x200001bc

08005418 <_kill_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d07      	ldr	r5, [pc, #28]	; (8005438 <_kill_r+0x20>)
 800541c:	2300      	movs	r3, #0
 800541e:	4604      	mov	r4, r0
 8005420:	4608      	mov	r0, r1
 8005422:	4611      	mov	r1, r2
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	f000 f80b 	bl	8005440 <_kill>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d102      	bne.n	8005434 <_kill_r+0x1c>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	b103      	cbz	r3, 8005434 <_kill_r+0x1c>
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20000b00 	.word	0x20000b00

0800543c <_getpid_r>:
 800543c:	f7fe bd1c 	b.w	8003e78 <_getpid>

08005440 <_kill>:
 8005440:	4b02      	ldr	r3, [pc, #8]	; (800544c <_kill+0xc>)
 8005442:	2258      	movs	r2, #88	; 0x58
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	4770      	bx	lr
 800544c:	20000b00 	.word	0x20000b00

08005450 <_exit>:
 8005450:	e7fe      	b.n	8005450 <_exit>
	...

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
